
LoginSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  000020a6  0000213a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000d8  008000d8  000021b2  2**0
                  ALLOC
  3 .stab         00002928  00000000  00000000  000021b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000839  00000000  00000000  00004adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002c0  00000000  00000000  00005318  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002637  00000000  00000000  000055d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d3b  00000000  00000000  00007c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001904  00000000  00000000  0000894a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000800  00000000  00000000  0000a250  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b89  00000000  00000000  0000aa50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b08  00000000  00000000  0000b5d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000d0e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 bd 0a 	jmp	0x157a	; 0x157a <__vector_13>
      38:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <__vector_14>
      3c:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "LoginSystem.h"

u8 WrongCounter=2;

int main(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	27 97       	sbiw	r28, 0x07	; 7
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
	u16 password;
	u8 passwordSize=0;
	u8 ReceiveValue;
	u8 KeypadValue;
	
	KEYPAD_init();
      a6:	0e 94 67 03 	call	0x6ce	; 0x6ce <KEYPAD_init>
	SERVO_init();
      aa:	0e 94 97 06 	call	0xd2e	; 0xd2e <SERVO_init>
	LCD_init();
      ae:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_init>
	BLUETOOTH_init();
      b2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <BLUETOOTH_init>
	LED_init(WARNING_LED_PORT,WARNING_LED_PIN);
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	65 e0       	ldi	r22, 0x05	; 5
      ba:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LED_init>
	LED_init(NOK_LED_PORT,NOK_LED_PIN);
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	66 e0       	ldi	r22, 0x06	; 6
      c2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LED_init>
	LED_init(OK_LED_PORT,OK_LED_PIN);
      c6:	81 e0       	ldi	r24, 0x01	; 1
      c8:	67 e0       	ldi	r22, 0x07	; 7
      ca:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LED_init>
	BUTTON_init(SwitchMode_BUTTON_PORT,SwitchMode_BUTTON_PIN);
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	60 e0       	ldi	r22, 0x00	; 0
      d2:	0e 94 09 03 	call	0x612	; 0x612 <BUTTON_init>
	RELAY_init(RELAY_PORT,RELAY_PIN);
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	64 e0       	ldi	r22, 0x04	; 4
      da:	0e 94 78 06 	call	0xcf0	; 0xcf0 <RELAY_init>
	EEPROM_init();
      de:	0e 94 1f 03 	call	0x63e	; 0x63e <EEPROM_init>
	
	SERVO_TurnON(CLOSE_Angle);
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	70 e0       	ldi	r23, 0x00	; 0
      e6:	cb 01       	movw	r24, r22
      e8:	0e 94 a4 06 	call	0xd48	; 0xd48 <SERVO_TurnON>
	
	EEPROM_WriteByte(0,PASSWARD_VALUE);
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	6b e7       	ldi	r22, 0x7B	; 123
      f2:	0e 94 22 03 	call	0x644	; 0x644 <EEPROM_WriteByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	8f e3       	ldi	r24, 0x3F	; 63
      f8:	9c e9       	ldi	r25, 0x9C	; 156
      fa:	01 97       	sbiw	r24, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x68>
      fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x6e>
     100:	00 00       	nop
	_delay_ms(10);
	EEPROM_ReadByte(0,&StoagePassword);
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	be 01       	movw	r22, r28
     108:	6c 5f       	subi	r22, 0xFC	; 252
     10a:	7f 4f       	sbci	r23, 0xFF	; 255
     10c:	0e 94 40 03 	call	0x680	; 0x680 <EEPROM_ReadByte>
     110:	af e3       	ldi	r26, 0x3F	; 63
     112:	bc e9       	ldi	r27, 0x9C	; 156
     114:	11 97       	sbiw	r26, 0x01	; 1
     116:	f1 f7       	brne	.-4      	; 0x114 <main+0x82>
     118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x88>
     11a:	00 00       	nop
	_delay_ms(10);
	
	LCD_SendString("    ENTER    ");
     11c:	80 e6       	ldi	r24, 0x60	; 96
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
	LCD_sendComnd(LCD_GO_TO_2ND_LINE);
     124:	80 ec       	ldi	r24, 0xC0	; 192
     126:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_sendComnd>
	LCD_SendString("    PASSWORD   ");
     12a:	8e e6       	ldi	r24, 0x6E	; 110
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
     132:	8f ef       	ldi	r24, 0xFF	; 255
     134:	9d e3       	ldi	r25, 0x3D	; 61
     136:	a9 e4       	ldi	r26, 0x49	; 73
     138:	81 50       	subi	r24, 0x01	; 1
     13a:	90 40       	sbci	r25, 0x00	; 0
     13c:	a0 40       	sbci	r26, 0x00	; 0
     13e:	e1 f7       	brne	.-8      	; 0x138 <main+0xa6>
     140:	00 c0       	rjmp	.+0      	; 0x142 <main+0xb0>
     142:	00 00       	nop
	_delay_ms(1500);
	LCD_ClearDesplay();
     144:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_ClearDesplay>
	LCD_SendString("PASSWORD:");
     148:	8e e7       	ldi	r24, 0x7E	; 126
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
	u8 Index=0;
	u8 StoagePassword;
	
	u8 ButtonValue;
	u16 password;
	u8 passwordSize=0;
     150:	10 e0       	ldi	r17, 0x00	; 0
u8 WrongCounter=2;

int main(void)
{
	u8 TakenPassword[MaxPasswardSize];
	u8 Index=0;
     152:	00 e0       	ldi	r16, 0x00	; 0
					LED_TurnOFF(NOK_LED_PORT,NOK_LED_PIN);
					LED_TurnOFF(WARNING_LED_PORT,WARNING_LED_PIN);
					RELAY_TurnOFF(RELAY_PORT,RELAY_PIN);
					SERVO_TurnON(CLOSE_Angle);
					LCD_ClearDesplay();
					LCD_SendString("PASSWORD:");  
     154:	0f 2e       	mov	r0, r31
     156:	fe e7       	ldi	r31, 0x7E	; 126
     158:	ef 2e       	mov	r14, r31
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	ff 2e       	mov	r15, r31
     15e:	f0 2d       	mov	r31, r0
		  		Index++;
		  		passwordSize++;
		  		LCD_sendChar('*');
		    }
		    
		    password =TakenPassword[0]*100+TakenPassword[1]*10+TakenPassword[2]*1;
     160:	0f 2e       	mov	r0, r31
     162:	f4 e6       	ldi	r31, 0x64	; 100
     164:	cf 2e       	mov	r12, r31
     166:	dd 24       	eor	r13, r13
     168:	f0 2d       	mov	r31, r0
					}
					else
					{
						LCD_ClearDesplay();
						LCD_GoToLocation(5,1);
						LCD_SendString("WARMING");
     16a:	0f 2e       	mov	r0, r31
     16c:	f9 eb       	ldi	r31, 0xB9	; 185
     16e:	af 2e       	mov	r10, r31
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	bf 2e       	mov	r11, r31
     174:	f0 2d       	mov	r31, r0
					if(WrongCounter>0)
					{
						Index=0;
						passwordSize=0;
						LCD_sendComnd(LCD_GO_TO_2ND_LINE);
						LCD_SendString("Try Again [");
     176:	0f 2e       	mov	r0, r31
     178:	f7 ea       	ldi	r31, 0xA7	; 167
     17a:	8f 2e       	mov	r8, r31
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	9f 2e       	mov	r9, r31
     180:	f0 2d       	mov	r31, r0
						LCD_SendIntegarNumber(WrongCounter);
						LCD_SendString("]");
     182:	0f 2e       	mov	r0, r31
     184:	f3 eb       	ldi	r31, 0xB3	; 179
     186:	6f 2e       	mov	r6, r31
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	7f 2e       	mov	r7, r31
     18c:	f0 2d       	mov	r31, r0
						LED_TurnOFF(OK_LED_PORT,OK_LED_PIN);
						LED_TurnOFF(NOK_LED_PORT,NOK_LED_PIN);
						LED_TurnON(WARNING_LED_PORT,WARNING_LED_PIN);
						RELAY_TurnOFF(RELAY_PORT,RELAY_PIN);
						LCD_GoToLocation(10,1);
						LCD_SendString("   ");
     18e:	0f 2e       	mov	r0, r31
     190:	f5 eb       	ldi	r31, 0xB5	; 181
     192:	4f 2e       	mov	r4, r31
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	5f 2e       	mov	r5, r31
     198:	f0 2d       	mov	r31, r0
		    {
		  		if(password==StoagePassword)
		  		{
		  			WrongCounter=2;
		  			 LCD_ClearDesplay();
		  			 LCD_SendString("    WELCOME    ");
     19a:	0f 2e       	mov	r0, r31
     19c:	f8 e8       	ldi	r31, 0x88	; 136
     19e:	2f 2e       	mov	r2, r31
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	3f 2e       	mov	r3, r31
     1a4:	f0 2d       	mov	r31, r0
	LCD_ClearDesplay();
	LCD_SendString("PASSWORD:");
	
    while(1)
    {
		BUTTON_ReadValue(SwitchMode_BUTTON_PORT,SwitchMode_BUTTON_PIN,&ButtonValue,BUTTON_PullDown);
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	60 e0       	ldi	r22, 0x00	; 0
     1aa:	ae 01       	movw	r20, r28
     1ac:	4b 5f       	subi	r20, 0xFB	; 251
     1ae:	5f 4f       	sbci	r21, 0xFF	; 255
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	0e 94 18 03 	call	0x630	; 0x630 <BUTTON_ReadValue>
		
		/*	BLUETOTH MODE	*/
		if (ButtonValue == BluetoothMode)
     1b6:	8d 81       	ldd	r24, Y+5	; 0x05
     1b8:	88 23       	and	r24, r24
     1ba:	09 f0       	breq	.+2      	; 0x1be <main+0x12c>
     1bc:	f7 c0       	rjmp	.+494    	; 0x3ac <main+0x31a>
		{
			BLUETOOTH_ReceiveChar(&ReceiveValue);
     1be:	ce 01       	movw	r24, r28
     1c0:	06 96       	adiw	r24, 0x06	; 6
     1c2:	0e 94 03 03 	call	0x606	; 0x606 <BLUETOOTH_ReceiveChar>
		    if(ReceiveValue>=48 && ReceiveValue<=57  && passwordSize!=3)
     1c6:	8e 81       	ldd	r24, Y+6	; 0x06
     1c8:	80 53       	subi	r24, 0x30	; 48
     1ca:	8a 30       	cpi	r24, 0x0A	; 10
     1cc:	70 f4       	brcc	.+28     	; 0x1ea <main+0x158>
     1ce:	13 30       	cpi	r17, 0x03	; 3
     1d0:	61 f0       	breq	.+24     	; 0x1ea <main+0x158>
		    {
		  		TakenPassword[Index]=ReceiveValue-48;
     1d2:	e1 e0       	ldi	r30, 0x01	; 1
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	ec 0f       	add	r30, r28
     1d8:	fd 1f       	adc	r31, r29
     1da:	e0 0f       	add	r30, r16
     1dc:	f1 1d       	adc	r31, r1
     1de:	80 83       	st	Z, r24
		  		Index++;
     1e0:	0f 5f       	subi	r16, 0xFF	; 255
		  		passwordSize++;
     1e2:	1f 5f       	subi	r17, 0xFF	; 255
		  		LCD_sendChar('*');
     1e4:	8a e2       	ldi	r24, 0x2A	; 42
     1e6:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendChar>
		    }
		    
		    password =TakenPassword[0]*100+TakenPassword[1]*10+TakenPassword[2]*1;
     1ea:	89 81       	ldd	r24, Y+1	; 0x01
     1ec:	2a 81       	ldd	r18, Y+2	; 0x02
     1ee:	4b 81       	ldd	r20, Y+3	; 0x03
		    
		    if(ReceiveValue == '=' && passwordSize ==3 )
     1f0:	9e 81       	ldd	r25, Y+6	; 0x06
     1f2:	9d 33       	cpi	r25, 0x3D	; 61
     1f4:	09 f0       	breq	.+2      	; 0x1f8 <main+0x166>
     1f6:	98 c0       	rjmp	.+304    	; 0x328 <main+0x296>
     1f8:	13 30       	cpi	r17, 0x03	; 3
     1fa:	09 f0       	breq	.+2      	; 0x1fe <main+0x16c>
     1fc:	95 c0       	rjmp	.+298    	; 0x328 <main+0x296>
		    {
		  		if(password==StoagePassword)
     1fe:	ec 81       	ldd	r30, Y+4	; 0x04
     200:	f0 e0       	ldi	r31, 0x00	; 0
		  		Index++;
		  		passwordSize++;
		  		LCD_sendChar('*');
		    }
		    
		    password =TakenPassword[0]*100+TakenPassword[1]*10+TakenPassword[2]*1;
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	8c 9d       	mul	r24, r12
     206:	b0 01       	movw	r22, r0
     208:	8d 9d       	mul	r24, r13
     20a:	70 0d       	add	r23, r0
     20c:	9c 9d       	mul	r25, r12
     20e:	70 0d       	add	r23, r0
     210:	11 24       	eor	r1, r1
     212:	82 2f       	mov	r24, r18
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	9c 01       	movw	r18, r24
     21c:	22 0f       	add	r18, r18
     21e:	33 1f       	adc	r19, r19
     220:	22 0f       	add	r18, r18
     222:	33 1f       	adc	r19, r19
     224:	82 0f       	add	r24, r18
     226:	93 1f       	adc	r25, r19
     228:	86 0f       	add	r24, r22
     22a:	97 1f       	adc	r25, r23
     22c:	84 0f       	add	r24, r20
     22e:	91 1d       	adc	r25, r1
		    
		    if(ReceiveValue == '=' && passwordSize ==3 )
		    {
		  		if(password==StoagePassword)
     230:	e8 17       	cp	r30, r24
     232:	f9 07       	cpc	r31, r25
     234:	31 f5       	brne	.+76     	; 0x282 <main+0x1f0>
		  		{
		  			WrongCounter=2;
     236:	92 e0       	ldi	r25, 0x02	; 2
     238:	90 93 c1 00 	sts	0x00C1, r25
		  			 LCD_ClearDesplay();
     23c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_ClearDesplay>
		  			 LCD_SendString("    WELCOME    ");
     240:	c1 01       	movw	r24, r2
     242:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
		  			 LCD_sendComnd(LCD_GO_TO_2ND_LINE);
     246:	80 ec       	ldi	r24, 0xC0	; 192
     248:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_sendComnd>
		  			 LCD_SendString("     USER     ");
     24c:	88 e9       	ldi	r24, 0x98	; 152
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
					SERVO_TurnON(OPEN_Angle);
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	84 eb       	ldi	r24, 0xB4	; 180
     25a:	92 e4       	ldi	r25, 0x42	; 66
     25c:	0e 94 a4 06 	call	0xd48	; 0xd48 <SERVO_TurnON>
					LED_TurnOFF(WARNING_LED_PORT,WARNING_LED_PIN);
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	65 e0       	ldi	r22, 0x05	; 5
     264:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
					LED_TurnOFF(NOK_LED_PORT,NOK_LED_PIN);
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	66 e0       	ldi	r22, 0x06	; 6
     26c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
					LED_TurnON(OK_LED_PORT,OK_LED_PIN);
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	67 e0       	ldi	r22, 0x07	; 7
     274:	0e 94 61 06 	call	0xcc2	; 0xcc2 <LED_TurnON>
					RELAY_TurnOFF(RELAY_PORT,RELAY_PIN);
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	64 e0       	ldi	r22, 0x04	; 4
     27c:	0e 94 88 06 	call	0xd10	; 0xd10 <RELAY_TurnOFF>
     280:	53 c0       	rjmp	.+166    	; 0x328 <main+0x296>
				}
				else
				{
					if(WrongCounter>0)
     282:	80 91 c1 00 	lds	r24, 0x00C1
     286:	88 23       	and	r24, r24
     288:	b1 f1       	breq	.+108    	; 0x2f6 <main+0x264>
					{
						Index=0;
						passwordSize=0;
						LCD_sendComnd(LCD_GO_TO_2ND_LINE);
     28a:	80 ec       	ldi	r24, 0xC0	; 192
     28c:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_sendComnd>
						LCD_SendString("Try Again [");
     290:	c4 01       	movw	r24, r8
     292:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
						LCD_SendIntegarNumber(WrongCounter);
     296:	80 91 c1 00 	lds	r24, 0x00C1
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_SendIntegarNumber>
						LCD_SendString("]");
     2a0:	c3 01       	movw	r24, r6
     2a2:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
						SERVO_TurnON(CLOSE_Angle);
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	cb 01       	movw	r24, r22
     2ac:	0e 94 a4 06 	call	0xd48	; 0xd48 <SERVO_TurnON>
						LED_TurnOFF(OK_LED_PORT,OK_LED_PIN);
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	67 e0       	ldi	r22, 0x07	; 7
     2b4:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
						LED_TurnOFF(NOK_LED_PORT,NOK_LED_PIN);
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	66 e0       	ldi	r22, 0x06	; 6
     2bc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
						LED_TurnON(WARNING_LED_PORT,WARNING_LED_PIN);
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	65 e0       	ldi	r22, 0x05	; 5
     2c4:	0e 94 61 06 	call	0xcc2	; 0xcc2 <LED_TurnON>
						RELAY_TurnOFF(RELAY_PORT,RELAY_PIN);
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	64 e0       	ldi	r22, 0x04	; 4
     2cc:	0e 94 88 06 	call	0xd10	; 0xd10 <RELAY_TurnOFF>
						LCD_GoToLocation(10,1);
     2d0:	8a e0       	ldi	r24, 0x0A	; 10
     2d2:	61 e0       	ldi	r22, 0x01	; 1
     2d4:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_GoToLocation>
						LCD_SendString("   ");
     2d8:	c2 01       	movw	r24, r4
     2da:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
						LCD_GoToLocation(10,1);
     2de:	8a e0       	ldi	r24, 0x0A	; 10
     2e0:	61 e0       	ldi	r22, 0x01	; 1
     2e2:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_GoToLocation>
						WrongCounter--;
     2e6:	80 91 c1 00 	lds	r24, 0x00C1
     2ea:	81 50       	subi	r24, 0x01	; 1
     2ec:	80 93 c1 00 	sts	0x00C1, r24
				else
				{
					if(WrongCounter>0)
					{
						Index=0;
						passwordSize=0;
     2f0:	10 e0       	ldi	r17, 0x00	; 0
				}
				else
				{
					if(WrongCounter>0)
					{
						Index=0;
     2f2:	00 e0       	ldi	r16, 0x00	; 0
     2f4:	19 c0       	rjmp	.+50     	; 0x328 <main+0x296>
						LCD_GoToLocation(10,1);
						WrongCounter--;
					}
					else
					{
						LCD_ClearDesplay();
     2f6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_ClearDesplay>
						LCD_GoToLocation(5,1);
     2fa:	85 e0       	ldi	r24, 0x05	; 5
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_GoToLocation>
						LCD_SendString("WARMING");
     302:	c5 01       	movw	r24, r10
     304:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
						LED_TurnOFF(OK_LED_PORT,OK_LED_PIN);
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	67 e0       	ldi	r22, 0x07	; 7
     30c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
						LED_TurnON(NOK_LED_PORT,NOK_LED_PIN);
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	66 e0       	ldi	r22, 0x06	; 6
     314:	0e 94 61 06 	call	0xcc2	; 0xcc2 <LED_TurnON>
						LED_TurnOFF(WARNING_LED_PORT,WARNING_LED_PIN);
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	65 e0       	ldi	r22, 0x05	; 5
     31c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
						RELAY_TurnON(RELAY_PORT,RELAY_PIN);
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	64 e0       	ldi	r22, 0x04	; 4
     324:	0e 94 80 06 	call	0xd00	; 0xd00 <RELAY_TurnON>
					}
				}
			}
			if(ReceiveValue== '#')
     328:	8e 81       	ldd	r24, Y+6	; 0x06
     32a:	83 32       	cpi	r24, 0x23	; 35
     32c:	09 f0       	breq	.+2      	; 0x330 <main+0x29e>
     32e:	3b cf       	rjmp	.-394    	; 0x1a6 <main+0x114>
			{
				if (WrongCounter==0)
     330:	80 91 c1 00 	lds	r24, 0x00C1
     334:	88 23       	and	r24, r24
     336:	e9 f4       	brne	.+58     	; 0x372 <main+0x2e0>
				{
					Index=0;
					passwordSize=0;
					LED_TurnOFF(OK_LED_PORT,OK_LED_PIN);
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	67 e0       	ldi	r22, 0x07	; 7
     33c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
					LED_TurnON(NOK_LED_PORT,NOK_LED_PIN);
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	66 e0       	ldi	r22, 0x06	; 6
     344:	0e 94 61 06 	call	0xcc2	; 0xcc2 <LED_TurnON>
					LED_TurnOFF(WARNING_LED_PORT,WARNING_LED_PIN);
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	65 e0       	ldi	r22, 0x05	; 5
     34c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
					RELAY_TurnON(RELAY_PORT,RELAY_PIN);
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	64 e0       	ldi	r22, 0x04	; 4
     354:	0e 94 80 06 	call	0xd00	; 0xd00 <RELAY_TurnON>
					SERVO_TurnON(CLOSE_Angle);
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	cb 01       	movw	r24, r22
     35e:	0e 94 a4 06 	call	0xd48	; 0xd48 <SERVO_TurnON>
					LCD_ClearDesplay();
     362:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_ClearDesplay>
					LCD_SendString("PASSWORD:");
     366:	c7 01       	movw	r24, r14
     368:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
			if(ReceiveValue== '#')
			{
				if (WrongCounter==0)
				{
					Index=0;
					passwordSize=0;
     36c:	10 e0       	ldi	r17, 0x00	; 0
			}
			if(ReceiveValue== '#')
			{
				if (WrongCounter==0)
				{
					Index=0;
     36e:	00 e0       	ldi	r16, 0x00	; 0
     370:	1a cf       	rjmp	.-460    	; 0x1a6 <main+0x114>
				}
			    else
			    {
					Index=0;
					passwordSize=0;
					LED_TurnOFF(OK_LED_PORT,OK_LED_PIN);
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	67 e0       	ldi	r22, 0x07	; 7
     376:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
					LED_TurnOFF(NOK_LED_PORT,NOK_LED_PIN);
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	66 e0       	ldi	r22, 0x06	; 6
     37e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
					LED_TurnOFF(WARNING_LED_PORT,WARNING_LED_PIN);
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	65 e0       	ldi	r22, 0x05	; 5
     386:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
					RELAY_TurnOFF(RELAY_PORT,RELAY_PIN);
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	64 e0       	ldi	r22, 0x04	; 4
     38e:	0e 94 88 06 	call	0xd10	; 0xd10 <RELAY_TurnOFF>
					SERVO_TurnON(CLOSE_Angle);
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	cb 01       	movw	r24, r22
     398:	0e 94 a4 06 	call	0xd48	; 0xd48 <SERVO_TurnON>
					LCD_ClearDesplay();
     39c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_ClearDesplay>
					LCD_SendString("PASSWORD:");  
     3a0:	c7 01       	movw	r24, r14
     3a2:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
					LCD_SendString("PASSWORD:");
				}
			    else
			    {
					Index=0;
					passwordSize=0;
     3a6:	10 e0       	ldi	r17, 0x00	; 0
					LCD_ClearDesplay();
					LCD_SendString("PASSWORD:");
				}
			    else
			    {
					Index=0;
     3a8:	00 e0       	ldi	r16, 0x00	; 0
     3aa:	fd ce       	rjmp	.-518    	; 0x1a6 <main+0x114>
		}
		
		/*	KEYPAD MODE	*/
		else 
		{
			KEYPAD_GetValue(&KeypadValue);
     3ac:	ce 01       	movw	r24, r28
     3ae:	07 96       	adiw	r24, 0x07	; 7
     3b0:	0e 94 b4 03 	call	0x768	; 0x768 <KEYPAD_GetValue>
			if(KEYPAD_NOT_PRESSED!=KeypadValue)
     3b4:	8f 81       	ldd	r24, Y+7	; 0x07
     3b6:	8f 3f       	cpi	r24, 0xFF	; 255
     3b8:	09 f4       	brne	.+2      	; 0x3bc <main+0x32a>
     3ba:	f5 ce       	rjmp	.-534    	; 0x1a6 <main+0x114>
			{
				if(KeypadValue!= '*' && KeypadValue!= '/' && KeypadValue!= '-' && KeypadValue!= '+' && KeypadValue!= '=' && KeypadValue!= '#' && passwordSize!=3)
     3bc:	8a 32       	cpi	r24, 0x2A	; 42
     3be:	09 f4       	brne	.+2      	; 0x3c2 <main+0x330>
     3c0:	f2 ce       	rjmp	.-540    	; 0x1a6 <main+0x114>
     3c2:	8f 32       	cpi	r24, 0x2F	; 47
     3c4:	09 f4       	brne	.+2      	; 0x3c8 <main+0x336>
     3c6:	ef ce       	rjmp	.-546    	; 0x1a6 <main+0x114>
     3c8:	8d 32       	cpi	r24, 0x2D	; 45
     3ca:	09 f4       	brne	.+2      	; 0x3ce <main+0x33c>
     3cc:	ec ce       	rjmp	.-552    	; 0x1a6 <main+0x114>
     3ce:	8b 32       	cpi	r24, 0x2B	; 43
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <main+0x342>
     3d2:	e9 ce       	rjmp	.-558    	; 0x1a6 <main+0x114>
     3d4:	8d 33       	cpi	r24, 0x3D	; 61
     3d6:	09 f4       	brne	.+2      	; 0x3da <main+0x348>
     3d8:	f4 c0       	rjmp	.+488    	; 0x5c2 <main+0x530>
     3da:	83 32       	cpi	r24, 0x23	; 35
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <main+0x34e>
     3de:	b3 c0       	rjmp	.+358    	; 0x546 <main+0x4b4>
     3e0:	13 30       	cpi	r17, 0x03	; 3
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <main+0x354>
     3e4:	e0 ce       	rjmp	.-576    	; 0x1a6 <main+0x114>
				{
					TakenPassword[Index]=KeypadValue;
     3e6:	e1 e0       	ldi	r30, 0x01	; 1
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	ec 0f       	add	r30, r28
     3ec:	fd 1f       	adc	r31, r29
     3ee:	e0 0f       	add	r30, r16
     3f0:	f1 1d       	adc	r31, r1
     3f2:	80 83       	st	Z, r24
					Index++;
     3f4:	0f 5f       	subi	r16, 0xFF	; 255
					passwordSize++;
     3f6:	1f 5f       	subi	r17, 0xFF	; 255
					LCD_sendChar('*');
     3f8:	8a e2       	ldi	r24, 0x2A	; 42
     3fa:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendChar>
				}
				
				password =TakenPassword[0]*100+TakenPassword[1]*10+TakenPassword[2]*1;
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	2a 81       	ldd	r18, Y+2	; 0x02
     402:	6b 81       	ldd	r22, Y+3	; 0x03
				
				if(KeypadValue== '=' && passwordSize ==3)
     404:	9f 81       	ldd	r25, Y+7	; 0x07
     406:	9d 33       	cpi	r25, 0x3D	; 61
     408:	09 f0       	breq	.+2      	; 0x40c <main+0x37a>
     40a:	99 c0       	rjmp	.+306    	; 0x53e <main+0x4ac>
					Index++;
					passwordSize++;
					LCD_sendChar('*');
				}
				
				password =TakenPassword[0]*100+TakenPassword[1]*10+TakenPassword[2]*1;
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	8c 9d       	mul	r24, r12
     410:	a0 01       	movw	r20, r0
     412:	8d 9d       	mul	r24, r13
     414:	50 0d       	add	r21, r0
     416:	9c 9d       	mul	r25, r12
     418:	50 0d       	add	r21, r0
     41a:	11 24       	eor	r1, r1
     41c:	82 2f       	mov	r24, r18
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	9c 01       	movw	r18, r24
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	22 0f       	add	r18, r18
     42c:	33 1f       	adc	r19, r19
     42e:	82 0f       	add	r24, r18
     430:	93 1f       	adc	r25, r19
     432:	84 0f       	add	r24, r20
     434:	95 1f       	adc	r25, r21
     436:	9c 01       	movw	r18, r24
     438:	26 0f       	add	r18, r22
     43a:	31 1d       	adc	r19, r1
				
				if(KeypadValue== '=' && passwordSize ==3)
     43c:	13 30       	cpi	r17, 0x03	; 3
     43e:	09 f0       	breq	.+2      	; 0x442 <main+0x3b0>
     440:	7e c0       	rjmp	.+252    	; 0x53e <main+0x4ac>
				{
					 if(password==StoagePassword)
     442:	8c 81       	ldd	r24, Y+4	; 0x04
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	82 17       	cp	r24, r18
     448:	93 07       	cpc	r25, r19
     44a:	31 f5       	brne	.+76     	; 0x498 <main+0x406>
					 {
						 WrongCounter=2;
     44c:	a2 e0       	ldi	r26, 0x02	; 2
     44e:	a0 93 c1 00 	sts	0x00C1, r26
						 LCD_ClearDesplay();
     452:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_ClearDesplay>
						 LCD_SendString("    WELCOME    ");
     456:	c1 01       	movw	r24, r2
     458:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
						 LCD_sendComnd(LCD_GO_TO_2ND_LINE);
     45c:	80 ec       	ldi	r24, 0xC0	; 192
     45e:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_sendComnd>
						 LCD_SendString("     USER     ");
     462:	88 e9       	ldi	r24, 0x98	; 152
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
						 SERVO_TurnON(OPEN_Angle);
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	84 eb       	ldi	r24, 0xB4	; 180
     470:	92 e4       	ldi	r25, 0x42	; 66
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <SERVO_TurnON>
						 LED_TurnOFF(WARNING_LED_PORT,WARNING_LED_PIN);
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	65 e0       	ldi	r22, 0x05	; 5
     47a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
						 LED_TurnOFF(NOK_LED_PORT,NOK_LED_PIN);
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	66 e0       	ldi	r22, 0x06	; 6
     482:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
						 LED_TurnON(OK_LED_PORT,OK_LED_PIN);
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	67 e0       	ldi	r22, 0x07	; 7
     48a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <LED_TurnON>
						 RELAY_TurnOFF(RELAY_PORT,RELAY_PIN);
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	64 e0       	ldi	r22, 0x04	; 4
     492:	0e 94 88 06 	call	0xd10	; 0xd10 <RELAY_TurnOFF>
     496:	53 c0       	rjmp	.+166    	; 0x53e <main+0x4ac>
					 }
					 else
					 {
						 if(WrongCounter>0)
     498:	80 91 c1 00 	lds	r24, 0x00C1
     49c:	88 23       	and	r24, r24
     49e:	b1 f1       	breq	.+108    	; 0x50c <main+0x47a>
						 {
							 Index=0;
							 passwordSize=0;
							 LCD_sendComnd(LCD_GO_TO_2ND_LINE);
     4a0:	80 ec       	ldi	r24, 0xC0	; 192
     4a2:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_sendComnd>
							 LCD_SendString("Try Again [");
     4a6:	c4 01       	movw	r24, r8
     4a8:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
							 LCD_SendIntegarNumber(WrongCounter);
     4ac:	80 91 c1 00 	lds	r24, 0x00C1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_SendIntegarNumber>
							 LCD_SendString("]");
     4b6:	c3 01       	movw	r24, r6
     4b8:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
							 SERVO_TurnON(CLOSE_Angle);
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	cb 01       	movw	r24, r22
     4c2:	0e 94 a4 06 	call	0xd48	; 0xd48 <SERVO_TurnON>
							 LED_TurnOFF(OK_LED_PORT,OK_LED_PIN);
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	67 e0       	ldi	r22, 0x07	; 7
     4ca:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
							 LED_TurnOFF(NOK_LED_PORT,NOK_LED_PIN);
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	66 e0       	ldi	r22, 0x06	; 6
     4d2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
							 LED_TurnON(WARNING_LED_PORT,WARNING_LED_PIN);
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	65 e0       	ldi	r22, 0x05	; 5
     4da:	0e 94 61 06 	call	0xcc2	; 0xcc2 <LED_TurnON>
							 RELAY_TurnOFF(RELAY_PORT,RELAY_PIN);
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	64 e0       	ldi	r22, 0x04	; 4
     4e2:	0e 94 88 06 	call	0xd10	; 0xd10 <RELAY_TurnOFF>
							 LCD_GoToLocation(10,1);
     4e6:	8a e0       	ldi	r24, 0x0A	; 10
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_GoToLocation>
							 LCD_SendString("   ");
     4ee:	c2 01       	movw	r24, r4
     4f0:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
							 LCD_GoToLocation(10,1);
     4f4:	8a e0       	ldi	r24, 0x0A	; 10
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_GoToLocation>
							 WrongCounter--;
     4fc:	80 91 c1 00 	lds	r24, 0x00C1
     500:	81 50       	subi	r24, 0x01	; 1
     502:	80 93 c1 00 	sts	0x00C1, r24
					 else
					 {
						 if(WrongCounter>0)
						 {
							 Index=0;
							 passwordSize=0;
     506:	10 e0       	ldi	r17, 0x00	; 0
					 }
					 else
					 {
						 if(WrongCounter>0)
						 {
							 Index=0;
     508:	00 e0       	ldi	r16, 0x00	; 0
     50a:	19 c0       	rjmp	.+50     	; 0x53e <main+0x4ac>
							 LCD_GoToLocation(10,1);
							 WrongCounter--;
						 }
						 else
						 {
							 LCD_ClearDesplay();
     50c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_ClearDesplay>
							 LCD_GoToLocation(5,1);
     510:	85 e0       	ldi	r24, 0x05	; 5
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_GoToLocation>
							 LCD_SendString("WARMING");
     518:	c5 01       	movw	r24, r10
     51a:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
							 LED_TurnOFF(OK_LED_PORT,OK_LED_PIN);
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	67 e0       	ldi	r22, 0x07	; 7
     522:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
							 LED_TurnON(NOK_LED_PORT,NOK_LED_PIN);
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	66 e0       	ldi	r22, 0x06	; 6
     52a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <LED_TurnON>
							 LED_TurnOFF(WARNING_LED_PORT,WARNING_LED_PIN);
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	65 e0       	ldi	r22, 0x05	; 5
     532:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
							 RELAY_TurnON(RELAY_PORT,RELAY_PIN);
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	64 e0       	ldi	r22, 0x04	; 4
     53a:	0e 94 80 06 	call	0xd00	; 0xd00 <RELAY_TurnON>
						 }
					 }
				}
				if(KeypadValue== '#')
     53e:	8f 81       	ldd	r24, Y+7	; 0x07
     540:	83 32       	cpi	r24, 0x23	; 35
     542:	09 f0       	breq	.+2      	; 0x546 <main+0x4b4>
     544:	30 ce       	rjmp	.-928    	; 0x1a6 <main+0x114>
				{
					if (WrongCounter==0)
     546:	80 91 c1 00 	lds	r24, 0x00C1
     54a:	88 23       	and	r24, r24
     54c:	e9 f4       	brne	.+58     	; 0x588 <main+0x4f6>
					{
						Index=0;
						passwordSize=0;
						LED_TurnOFF(OK_LED_PORT,OK_LED_PIN);
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	67 e0       	ldi	r22, 0x07	; 7
     552:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
						LED_TurnON(NOK_LED_PORT,NOK_LED_PIN);
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	66 e0       	ldi	r22, 0x06	; 6
     55a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <LED_TurnON>
						LED_TurnOFF(WARNING_LED_PORT,WARNING_LED_PIN);
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	65 e0       	ldi	r22, 0x05	; 5
     562:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
						RELAY_TurnON(RELAY_PORT,RELAY_PIN);
     566:	81 e0       	ldi	r24, 0x01	; 1
     568:	64 e0       	ldi	r22, 0x04	; 4
     56a:	0e 94 80 06 	call	0xd00	; 0xd00 <RELAY_TurnON>
						SERVO_TurnON(CLOSE_Angle);
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	cb 01       	movw	r24, r22
     574:	0e 94 a4 06 	call	0xd48	; 0xd48 <SERVO_TurnON>
						LCD_ClearDesplay();
     578:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_ClearDesplay>
						LCD_SendString("PASSWORD:");
     57c:	c7 01       	movw	r24, r14
     57e:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
				if(KeypadValue== '#')
				{
					if (WrongCounter==0)
					{
						Index=0;
						passwordSize=0;
     582:	10 e0       	ldi	r17, 0x00	; 0
				}
				if(KeypadValue== '#')
				{
					if (WrongCounter==0)
					{
						Index=0;
     584:	00 e0       	ldi	r16, 0x00	; 0
     586:	0f ce       	rjmp	.-994    	; 0x1a6 <main+0x114>
					}
					else
					{
						Index=0;
						passwordSize=0;
						LED_TurnOFF(OK_LED_PORT,OK_LED_PIN);
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	67 e0       	ldi	r22, 0x07	; 7
     58c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
						LED_TurnOFF(NOK_LED_PORT,NOK_LED_PIN);
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	66 e0       	ldi	r22, 0x06	; 6
     594:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
						LED_TurnOFF(WARNING_LED_PORT,WARNING_LED_PIN);
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	65 e0       	ldi	r22, 0x05	; 5
     59c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <LED_TurnOFF>
						RELAY_TurnOFF(RELAY_PORT,RELAY_PIN);
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	64 e0       	ldi	r22, 0x04	; 4
     5a4:	0e 94 88 06 	call	0xd10	; 0xd10 <RELAY_TurnOFF>
						SERVO_TurnON(CLOSE_Angle);
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	cb 01       	movw	r24, r22
     5ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <SERVO_TurnON>
						LCD_ClearDesplay();
     5b2:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_ClearDesplay>
						LCD_SendString("PASSWORD:");
     5b6:	c7 01       	movw	r24, r14
     5b8:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
						LCD_SendString("PASSWORD:");
					}
					else
					{
						Index=0;
						passwordSize=0;
     5bc:	10 e0       	ldi	r17, 0x00	; 0
						LCD_ClearDesplay();
						LCD_SendString("PASSWORD:");
					}
					else
					{
						Index=0;
     5be:	00 e0       	ldi	r16, 0x00	; 0
     5c0:	f2 cd       	rjmp	.-1052   	; 0x1a6 <main+0x114>
					Index++;
					passwordSize++;
					LCD_sendChar('*');
				}
				
				password =TakenPassword[0]*100+TakenPassword[1]*10+TakenPassword[2]*1;
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	8c 9d       	mul	r24, r12
     5c8:	a0 01       	movw	r20, r0
     5ca:	8d 9d       	mul	r24, r13
     5cc:	50 0d       	add	r21, r0
     5ce:	9c 9d       	mul	r25, r12
     5d0:	50 0d       	add	r21, r0
     5d2:	11 24       	eor	r1, r1
     5d4:	8a 81       	ldd	r24, Y+2	; 0x02
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	9c 01       	movw	r18, r24
     5de:	22 0f       	add	r18, r18
     5e0:	33 1f       	adc	r19, r19
     5e2:	22 0f       	add	r18, r18
     5e4:	33 1f       	adc	r19, r19
     5e6:	82 0f       	add	r24, r18
     5e8:	93 1f       	adc	r25, r19
     5ea:	84 0f       	add	r24, r20
     5ec:	95 1f       	adc	r25, r21
     5ee:	2b 81       	ldd	r18, Y+3	; 0x03
     5f0:	ac 01       	movw	r20, r24
     5f2:	42 0f       	add	r20, r18
     5f4:	51 1d       	adc	r21, r1
     5f6:	9a 01       	movw	r18, r20
     5f8:	21 cf       	rjmp	.-446    	; 0x43c <main+0x3aa>

000005fa <BLUETOOTH_init>:



void BLUETOOTH_init(void)
{
	UART_init();
     5fa:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <UART_init>
}
     5fe:	08 95       	ret

00000600 <BLUETOOTH_TransimitChar>:

void BLUETOOTH_TransimitChar(u8 TransimitData)
{
	UART_TransmiteChar(TransimitData);
     600:	0e 94 93 0a 	call	0x1526	; 0x1526 <UART_TransmiteChar>
}
     604:	08 95       	ret

00000606 <BLUETOOTH_ReceiveChar>:

void BLUETOOTH_ReceiveChar(u8* ReceiveData)
{
	UART_ReceiveChar(ReceiveData);
     606:	0e 94 8b 0a 	call	0x1516	; 0x1516 <UART_ReceiveChar>
}
     60a:	08 95       	ret

0000060c <BLUETOOTH_TransimitString>:

void BLUETOOTH_TransimitString (u8* TransimitData)
{
	UART_TransmiteString(TransimitData);
     60c:	0e 94 98 0a 	call	0x1530	; 0x1530 <UART_TransmiteString>
     610:	08 95       	ret

00000612 <BUTTON_init>:
#include "../includes/BUTTON_interface.h"
#include "../includes/BUTTON_private.h"

void BUTTON_init(u8 ButtonPort ,u8 ButtonPin)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     612:	84 30       	cpi	r24, 0x04	; 4
     614:	28 f4       	brcc	.+10     	; 0x620 <BUTTON_init+0xe>
     616:	68 30       	cpi	r22, 0x08	; 8
     618:	18 f4       	brcc	.+6      	; 0x620 <BUTTON_init+0xe>
	{
		DIO_SetPinDirection(ButtonPort,ButtonPin,DIO_PIN_INPUT);
     61a:	40 e0       	ldi	r20, 0x00	; 0
     61c:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
     620:	08 95       	ret

00000622 <BUTTON_ActivePullUp>:
	}
}

void BUTTON_ActivePullUp(u8 ButtonPort ,u8 ButtonPin)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     622:	84 30       	cpi	r24, 0x04	; 4
     624:	20 f4       	brcc	.+8      	; 0x62e <BUTTON_ActivePullUp+0xc>
     626:	68 30       	cpi	r22, 0x08	; 8
     628:	10 f4       	brcc	.+4      	; 0x62e <BUTTON_ActivePullUp+0xc>
	{
		DIO_activePinInPullUpResistance(ButtonPort,ButtonPin);
     62a:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_activePinInPullUpResistance>
     62e:	08 95       	ret

00000630 <BUTTON_ReadValue>:
	}
}

void BUTTON_ReadValue(u8 ButtonPort ,u8 ButtonPin,u8* PinValue,u8 BUTTON_STATUE)
{
	if (ButtonPort <=3 && ButtonPin<=7)
     630:	84 30       	cpi	r24, 0x04	; 4
     632:	20 f4       	brcc	.+8      	; 0x63c <BUTTON_ReadValue+0xc>
     634:	68 30       	cpi	r22, 0x08	; 8
     636:	10 f4       	brcc	.+4      	; 0x63c <BUTTON_ReadValue+0xc>
	{
		DIO_ReadValue(ButtonPort,ButtonPin,PinValue);
     638:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_ReadValue>
     63c:	08 95       	ret

0000063e <EEPROM_init>:
#include "../includes/EEPROM_interface.h"
#include "../includes/EEPROM_private.h"

void EEPROM_init(void)
{
	I2C_initMaster();
     63e:	0e 94 9c 09 	call	0x1338	; 0x1338 <I2C_initMaster>
}
     642:	08 95       	ret

00000644 <EEPROM_WriteByte>:

void EEPROM_WriteByte(u16 WordAdd,u8 Data)
{
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	d8 2f       	mov	r29, r24
     64c:	19 2f       	mov	r17, r25
     64e:	c6 2f       	mov	r28, r22
	u8 SlaveAddress = (WordAdd>>8) | EEPROM_FIXED_ADDRESS ;
	
	I2C_sendStartCondition();
     650:	0e 94 a7 09 	call	0x134e	; 0x134e <I2C_sendStartCondition>
	
	I2C_sendSlaveAddWithWrite(SlaveAddress);
     654:	81 2f       	mov	r24, r17
     656:	80 65       	ori	r24, 0x50	; 80
     658:	0e 94 ca 09 	call	0x1394	; 0x1394 <I2C_sendSlaveAddWithWrite>
	
	I2C_sendMasterDataByte((u8)WordAdd);
     65c:	8d 2f       	mov	r24, r29
     65e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <I2C_sendMasterDataByte>
	
	I2C_sendMasterDataByte(Data);
     662:	8c 2f       	mov	r24, r28
     664:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <I2C_sendMasterDataByte>
	
	I2C_sendStopCondition();
     668:	0e 94 c3 09 	call	0x1386	; 0x1386 <I2C_sendStopCondition>
     66c:	8f e1       	ldi	r24, 0x1F	; 31
     66e:	9e e4       	ldi	r25, 0x4E	; 78
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	f1 f7       	brne	.-4      	; 0x670 <EEPROM_WriteByte+0x2c>
     674:	00 c0       	rjmp	.+0      	; 0x676 <EEPROM_WriteByte+0x32>
     676:	00 00       	nop
	
	_delay_ms(5);
}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	08 95       	ret

00000680 <EEPROM_ReadByte>:

void EEPROM_ReadByte(u16 WordAdd,u8* Data)
{
     680:	0f 93       	push	r16
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	08 2f       	mov	r16, r24
     68a:	eb 01       	movw	r28, r22
	if(Data != NULL)
     68c:	20 97       	sbiw	r28, 0x00	; 0
     68e:	d1 f0       	breq	.+52     	; 0x6c4 <EEPROM_ReadByte+0x44>
	{
		u8 SlaveAddress = (WordAdd>>8) | EEPROM_FIXED_ADDRESS ;
     690:	19 2f       	mov	r17, r25
     692:	10 65       	ori	r17, 0x50	; 80
		
		I2C_sendStartCondition();
     694:	0e 94 a7 09 	call	0x134e	; 0x134e <I2C_sendStartCondition>
		
		I2C_sendSlaveAddWithWrite(SlaveAddress);
     698:	81 2f       	mov	r24, r17
     69a:	0e 94 ca 09 	call	0x1394	; 0x1394 <I2C_sendSlaveAddWithWrite>
		
		I2C_sendMasterDataByte((u8)WordAdd);
     69e:	80 2f       	mov	r24, r16
     6a0:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <I2C_sendMasterDataByte>
		
		I2C_sendRepStartCondition();
     6a4:	0e 94 b5 09 	call	0x136a	; 0x136a <I2C_sendRepStartCondition>
		
		I2C_sendSlaveAddWithRead(SlaveAddress);
     6a8:	81 2f       	mov	r24, r17
     6aa:	0e 94 dd 09 	call	0x13ba	; 0x13ba <I2C_sendSlaveAddWithRead>
		
		I2C_recieveMasterDataByte(Data);
     6ae:	ce 01       	movw	r24, r28
     6b0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <I2C_recieveMasterDataByte>
		
		I2C_sendStopCondition();
     6b4:	0e 94 c3 09 	call	0x1386	; 0x1386 <I2C_sendStopCondition>
     6b8:	8f e1       	ldi	r24, 0x1F	; 31
     6ba:	9e e4       	ldi	r25, 0x4E	; 78
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <EEPROM_ReadByte+0x3c>
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <EEPROM_ReadByte+0x42>
     6c2:	00 00       	nop
	}
	else
	{
		//No Thing 
	}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	1f 91       	pop	r17
     6ca:	0f 91       	pop	r16
     6cc:	08 95       	ret

000006ce <KEYPAD_init>:
#include "../includes/KEYPAD_interface.h"
#include "../includes/KEYPAD_private.h"

void KEYPAD_init(void)
{
	DIO_SetPinDirection(KEYPAD_ROW0_PORT,KEYPAD_ROW0_PIN,DIO_PORT_INPUT);
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	60 e0       	ldi	r22, 0x00	; 0
     6d2:	40 e0       	ldi	r20, 0x00	; 0
     6d4:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_ROW1_PORT,KEYPAD_ROW1_PIN,DIO_PORT_INPUT);	
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_ROW2_PORT,KEYPAD_ROW2_PIN,DIO_PORT_INPUT);	
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	62 e0       	ldi	r22, 0x02	; 2
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_ROW3_PORT,KEYPAD_ROW3_PIN,DIO_PORT_INPUT);	
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	63 e0       	ldi	r22, 0x03	; 3
     6f0:	40 e0       	ldi	r20, 0x00	; 0
     6f2:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(KEYPAD_COL0_PORT,KEYPAD_COL0_PIN,DIO_PORT_OUTPUT);	
     6f6:	82 e0       	ldi	r24, 0x02	; 2
     6f8:	64 e0       	ldi	r22, 0x04	; 4
     6fa:	4f ef       	ldi	r20, 0xFF	; 255
     6fc:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL1_PORT,KEYPAD_COL1_PIN,DIO_PORT_OUTPUT);	
     700:	82 e0       	ldi	r24, 0x02	; 2
     702:	65 e0       	ldi	r22, 0x05	; 5
     704:	4f ef       	ldi	r20, 0xFF	; 255
     706:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL2_PORT,KEYPAD_COL2_PIN,DIO_PORT_OUTPUT);	
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	66 e0       	ldi	r22, 0x06	; 6
     70e:	4f ef       	ldi	r20, 0xFF	; 255
     710:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL3_PORT,KEYPAD_COL3_PIN,DIO_PORT_OUTPUT);	
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	67 e0       	ldi	r22, 0x07	; 7
     718:	4f ef       	ldi	r20, 0xFF	; 255
     71a:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(KEYPAD_COL0_PORT,KEYPAD_COL0_PIN,DIO_PIN_HIGH);
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	64 e0       	ldi	r22, 0x04	; 4
     722:	41 e0       	ldi	r20, 0x01	; 1
     724:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL1_PORT,KEYPAD_COL1_PIN,DIO_PIN_HIGH);
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	65 e0       	ldi	r22, 0x05	; 5
     72c:	41 e0       	ldi	r20, 0x01	; 1
     72e:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL2_PORT,KEYPAD_COL2_PIN,DIO_PIN_HIGH);
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	66 e0       	ldi	r22, 0x06	; 6
     736:	41 e0       	ldi	r20, 0x01	; 1
     738:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(KEYPAD_COL3_PORT,KEYPAD_COL3_PIN,DIO_PIN_HIGH);
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	67 e0       	ldi	r22, 0x07	; 7
     740:	41 e0       	ldi	r20, 0x01	; 1
     742:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	
	DIO_activePinInPullUpResistance(KEYPAD_ROW0_PORT,KEYPAD_ROW0_PIN);
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_activePinInPullUpResistance>
	DIO_activePinInPullUpResistance(KEYPAD_ROW1_PORT,KEYPAD_ROW1_PIN);
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_activePinInPullUpResistance>
	DIO_activePinInPullUpResistance(KEYPAD_ROW2_PORT,KEYPAD_ROW2_PIN);
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	62 e0       	ldi	r22, 0x02	; 2
     75a:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_activePinInPullUpResistance>
	DIO_activePinInPullUpResistance(KEYPAD_ROW3_PORT,KEYPAD_ROW3_PIN);
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	63 e0       	ldi	r22, 0x03	; 3
     762:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_activePinInPullUpResistance>
}
     766:	08 95       	ret

00000768 <KEYPAD_GetValue>:


void KEYPAD_GetValue(u8* ReturnedValue)  //try switch 
{
     768:	2f 92       	push	r2
     76a:	3f 92       	push	r3
     76c:	4f 92       	push	r4
     76e:	5f 92       	push	r5
     770:	6f 92       	push	r6
     772:	7f 92       	push	r7
     774:	9f 92       	push	r9
     776:	af 92       	push	r10
     778:	bf 92       	push	r11
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	a1 97       	sbiw	r28, 0x21	; 33
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
     79a:	99 a3       	lds	r25, 0x59
     79c:	88 a3       	lds	r24, 0x58
	if (ReturnedValue != NULL)
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <KEYPAD_GetValue+0x3c>
     7a2:	83 c0       	rjmp	.+262    	; 0x8aa <__stack+0x4b>
	{
		*ReturnedValue=KEYPAD_NOT_PRESSED;
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	e8 a1       	lds	r30, 0x48
     7a8:	f9 a1       	lds	r31, 0x49
     7aa:	80 83       	st	Z, r24
		
		u8 RowsCounter,ColumnsCounter ;
		
		u8 ColumnsPort[4]={KEYPAD_COL0_PORT,KEYPAD_COL1_PORT,KEYPAD_COL2_PORT,KEYPAD_COL3_PORT};
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	8a 87       	std	Y+10, r24	; 0x0a
     7b0:	8b 87       	std	Y+11, r24	; 0x0b
     7b2:	8c 87       	std	Y+12, r24	; 0x0c
     7b4:	8d 87       	std	Y+13, r24	; 0x0d
		u8 ColumnsPins[4]={KEYPAD_COL0_PIN,KEYPAD_COL1_PIN,KEYPAD_COL2_PIN,KEYPAD_COL3_PIN};
     7b6:	94 e0       	ldi	r25, 0x04	; 4
     7b8:	9e 83       	std	Y+6, r25	; 0x06
     7ba:	95 e0       	ldi	r25, 0x05	; 5
     7bc:	9f 83       	std	Y+7, r25	; 0x07
     7be:	96 e0       	ldi	r25, 0x06	; 6
     7c0:	98 87       	std	Y+8, r25	; 0x08
     7c2:	97 e0       	ldi	r25, 0x07	; 7
     7c4:	99 87       	std	Y+9, r25	; 0x09
	
		u8 RowsPort[4]={KEYPAD_ROW0_PORT,KEYPAD_ROW1_PORT,KEYPAD_ROW2_PORT,KEYPAD_ROW3_PORT};
     	u8 RowsPins[4]={KEYPAD_ROW0_PIN,KEYPAD_ROW1_PIN,KEYPAD_ROW2_PIN,KEYPAD_ROW3_PIN};
     7c6:	1a 82       	std	Y+2, r1	; 0x02
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	9b 83       	std	Y+3, r25	; 0x03
     7cc:	8c 83       	std	Y+4, r24	; 0x04
     7ce:	83 e0       	ldi	r24, 0x03	; 3
     7d0:	8d 83       	std	Y+5, r24	; 0x05
        
		u8 PinValue,PinFlag=0;
		
		u8 KEYPAD_Caracters [4][4] = KEYPAD_PATTERN;
     7d2:	de 01       	movw	r26, r28
     7d4:	1e 96       	adiw	r26, 0x0e	; 14
     7d6:	e2 ec       	ldi	r30, 0xC2	; 194
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	80 e1       	ldi	r24, 0x10	; 16
     7dc:	01 90       	ld	r0, Z+
     7de:	0d 92       	st	X+, r0
     7e0:	81 50       	subi	r24, 0x01	; 1
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <KEYPAD_GetValue+0x74>
     7e4:	0f 2e       	mov	r0, r31
     7e6:	fa e0       	ldi	r31, 0x0A	; 10
     7e8:	4f 2e       	mov	r4, r31
     7ea:	55 24       	eor	r5, r5
     7ec:	f0 2d       	mov	r31, r0
     7ee:	4c 0e       	add	r4, r28
     7f0:	5d 1e       	adc	r5, r29
     7f2:	0f 2e       	mov	r0, r31
     7f4:	f6 e0       	ldi	r31, 0x06	; 6
     7f6:	2f 2e       	mov	r2, r31
     7f8:	33 24       	eor	r3, r3
     7fa:	f0 2d       	mov	r31, r0
     7fc:	2c 0e       	add	r2, r28
     7fe:	3d 1e       	adc	r3, r29
     800:	aa 24       	eor	r10, r10
     802:	bb 24       	eor	r11, r11
										  
		for(ColumnsCounter=0;ColumnsCounter<4;ColumnsCounter++)
		{
			//Activate Each Column 
			DIO_SetPinValue(ColumnsPort[ColumnsCounter],ColumnsPins[ColumnsCounter],DIO_PIN_LOW);
     804:	bf 8e       	std	Y+31, r11	; 0x1f
     806:	ae 8e       	std	Y+30, r10	; 0x1e
     808:	f2 01       	movw	r30, r4
     80a:	e1 90       	ld	r14, Z+
     80c:	2f 01       	movw	r4, r30
     80e:	f1 01       	movw	r30, r2
     810:	91 90       	ld	r9, Z+
     812:	1f 01       	movw	r2, r30
     814:	8e 2d       	mov	r24, r14
     816:	69 2d       	mov	r22, r9
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
     81e:	cc 24       	eor	r12, r12
     820:	dd 24       	eor	r13, r13
     822:	68 94       	set
     824:	c1 f8       	bld	r12, 1
     826:	cc 0e       	add	r12, r28
     828:	dd 1e       	adc	r13, r29
     82a:	00 e0       	ldi	r16, 0x00	; 0
     82c:	10 e0       	ldi	r17, 0x00	; 0
			for (RowsCounter=0;RowsCounter<4;RowsCounter++)
			{
				//Read Rows 
				DIO_ReadValue(RowsPort[RowsCounter],RowsPins[RowsCounter],&PinValue);
     82e:	38 01       	movw	r6, r16
     830:	f6 01       	movw	r30, r12
     832:	f1 90       	ld	r15, Z+
     834:	6f 01       	movw	r12, r30
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	6f 2d       	mov	r22, r15
     83a:	ae 01       	movw	r20, r28
     83c:	4f 5f       	subi	r20, 0xFF	; 255
     83e:	5f 4f       	sbci	r21, 0xFF	; 255
     840:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_ReadValue>
				if (KEYPAD_PRESSED == PinValue)
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	88 23       	and	r24, r24
     848:	f1 f4       	brne	.+60     	; 0x886 <__stack+0x27>
				{
					while (KEYPAD_PRESSED == PinValue)
					{
						//block keypad to take one value for one pressed 
						DIO_ReadValue(RowsPort[RowsCounter],RowsPins[RowsCounter],&PinValue);
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	6f 2d       	mov	r22, r15
     84e:	ae 01       	movw	r20, r28
     850:	4f 5f       	subi	r20, 0xFF	; 255
     852:	5f 4f       	sbci	r21, 0xFF	; 255
     854:	0e 94 36 08 	call	0x106c	; 0x106c <DIO_ReadValue>
			{
				//Read Rows 
				DIO_ReadValue(RowsPort[RowsCounter],RowsPins[RowsCounter],&PinValue);
				if (KEYPAD_PRESSED == PinValue)
				{
					while (KEYPAD_PRESSED == PinValue)
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	88 23       	and	r24, r24
     85c:	b1 f3       	breq	.-20     	; 0x84a <KEYPAD_GetValue+0xe2>
					{
						//block keypad to take one value for one pressed 
						DIO_ReadValue(RowsPort[RowsCounter],RowsPins[RowsCounter],&PinValue);
					}
					*ReturnedValue = KEYPAD_Caracters[RowsCounter][ColumnsCounter];
     85e:	f3 01       	movw	r30, r6
     860:	ee 0f       	add	r30, r30
     862:	ff 1f       	adc	r31, r31
     864:	ee 0f       	add	r30, r30
     866:	ff 1f       	adc	r31, r31
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	8c 0f       	add	r24, r28
     86e:	9d 1f       	adc	r25, r29
     870:	e8 0f       	add	r30, r24
     872:	f9 1f       	adc	r31, r25
     874:	8e 8d       	ldd	r24, Y+30	; 0x1e
     876:	9f 8d       	ldd	r25, Y+31	; 0x1f
     878:	e8 0f       	add	r30, r24
     87a:	f9 1f       	adc	r31, r25
     87c:	85 85       	ldd	r24, Z+13	; 0x0d
     87e:	e8 a1       	lds	r30, 0x48
     880:	f9 a1       	lds	r31, 0x49
     882:	80 83       	st	Z, r24
     884:	12 c0       	rjmp	.+36     	; 0x8aa <__stack+0x4b>
     886:	0f 5f       	subi	r16, 0xFF	; 255
     888:	1f 4f       	sbci	r17, 0xFF	; 255
										  
		for(ColumnsCounter=0;ColumnsCounter<4;ColumnsCounter++)
		{
			//Activate Each Column 
			DIO_SetPinValue(ColumnsPort[ColumnsCounter],ColumnsPins[ColumnsCounter],DIO_PIN_LOW);
			for (RowsCounter=0;RowsCounter<4;RowsCounter++)
     88a:	04 30       	cpi	r16, 0x04	; 4
     88c:	11 05       	cpc	r17, r1
     88e:	79 f6       	brne	.-98     	; 0x82e <KEYPAD_GetValue+0xc6>
			if (1 ==PinFlag)
			{
				break;
			}
			//Deactivate Current Column 
			DIO_SetPinValue(ColumnsPort[ColumnsCounter],ColumnsPins[ColumnsCounter],DIO_PIN_HIGH);
     890:	8e 2d       	mov	r24, r14
     892:	69 2d       	mov	r22, r9
     894:	41 e0       	ldi	r20, 0x01	; 1
     896:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
     89a:	08 94       	sec
     89c:	a1 1c       	adc	r10, r1
     89e:	b1 1c       	adc	r11, r1
        
		u8 PinValue,PinFlag=0;
		
		u8 KEYPAD_Caracters [4][4] = KEYPAD_PATTERN;
										  
		for(ColumnsCounter=0;ColumnsCounter<4;ColumnsCounter++)
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	af 16       	cp	r10, r31
     8a4:	b1 04       	cpc	r11, r1
     8a6:	09 f0       	breq	.+2      	; 0x8aa <__stack+0x4b>
     8a8:	ad cf       	rjmp	.-166    	; 0x804 <KEYPAD_GetValue+0x9c>
	} 
	else
	{
		//do nothing
	}	
}
     8aa:	a1 96       	adiw	r28, 0x21	; 33
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	f8 94       	cli
     8b0:	de bf       	out	0x3e, r29	; 62
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	cd bf       	out	0x3d, r28	; 61
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	1f 91       	pop	r17
     8bc:	0f 91       	pop	r16
     8be:	ff 90       	pop	r15
     8c0:	ef 90       	pop	r14
     8c2:	df 90       	pop	r13
     8c4:	cf 90       	pop	r12
     8c6:	bf 90       	pop	r11
     8c8:	af 90       	pop	r10
     8ca:	9f 90       	pop	r9
     8cc:	7f 90       	pop	r7
     8ce:	6f 90       	pop	r6
     8d0:	5f 90       	pop	r5
     8d2:	4f 90       	pop	r4
     8d4:	3f 90       	pop	r3
     8d6:	2f 90       	pop	r2
     8d8:	08 95       	ret

000008da <private_WriteHalfPort>:
	#endif
}


void private_WriteHalfPort (u8 Value)
{
     8da:	cf 93       	push	r28
     8dc:	c8 2f       	mov	r28, r24
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit0)) ? (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_HIGH));
     8de:	80 fd       	sbrc	r24, 0
     8e0:	06 c0       	rjmp	.+12     	; 0x8ee <private_WriteHalfPort+0x14>
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	64 e0       	ldi	r22, 0x04	; 4
     8e6:	40 e0       	ldi	r20, 0x00	; 0
     8e8:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
     8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <private_WriteHalfPort+0x1e>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	64 e0       	ldi	r22, 0x04	; 4
     8f2:	41 e0       	ldi	r20, 0x01	; 1
     8f4:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit1)) ? (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_HIGH));
     8f8:	8c 2f       	mov	r24, r28
     8fa:	86 95       	lsr	r24
     8fc:	80 fd       	sbrc	r24, 0
     8fe:	06 c0       	rjmp	.+12     	; 0x90c <private_WriteHalfPort+0x32>
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	65 e0       	ldi	r22, 0x05	; 5
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
     90a:	05 c0       	rjmp	.+10     	; 0x916 <private_WriteHalfPort+0x3c>
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	65 e0       	ldi	r22, 0x05	; 5
     910:	41 e0       	ldi	r20, 0x01	; 1
     912:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit2)) ? (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_HIGH));
     916:	8c 2f       	mov	r24, r28
     918:	86 95       	lsr	r24
     91a:	86 95       	lsr	r24
     91c:	80 fd       	sbrc	r24, 0
     91e:	06 c0       	rjmp	.+12     	; 0x92c <private_WriteHalfPort+0x52>
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	66 e0       	ldi	r22, 0x06	; 6
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
     92a:	05 c0       	rjmp	.+10     	; 0x936 <private_WriteHalfPort+0x5c>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	66 e0       	ldi	r22, 0x06	; 6
     930:	41 e0       	ldi	r20, 0x01	; 1
     932:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	(DIO_PIN_LOW==GET_BIT(Value,LCD_CmndBit3)) ? (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_LOW)) : (DIO_SetPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_HIGH));
     936:	c6 95       	lsr	r28
     938:	c6 95       	lsr	r28
     93a:	c6 95       	lsr	r28
     93c:	c0 fd       	sbrc	r28, 0
     93e:	06 c0       	rjmp	.+12     	; 0x94c <private_WriteHalfPort+0x72>
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	67 e0       	ldi	r22, 0x07	; 7
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
     94a:	05 c0       	rjmp	.+10     	; 0x956 <private_WriteHalfPort+0x7c>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	67 e0       	ldi	r22, 0x07	; 7
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
}
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <LCD_sendComnd>:
	
	#endif
}

void LCD_sendComnd(u8 Cmnd)
{
     95a:	cf 93       	push	r28
     95c:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	61 e0       	ldi	r22, 0x01	; 1
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	62 e0       	ldi	r22, 0x02	; 2
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd>>4);                                    //PORTA_REG= (PORTA_REG & 0x0f) | (Cmnd & 0xf0)
     972:	8c 2f       	mov	r24, r28
     974:	82 95       	swap	r24
     976:	8f 70       	andi	r24, 0x0F	; 15
     978:	0e 94 6d 04 	call	0x8da	; 0x8da <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	63 e0       	ldi	r22, 0x03	; 3
     980:	41 e0       	ldi	r20, 0x01	; 1
     982:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
     986:	8f e9       	ldi	r24, 0x9F	; 159
     988:	9f e0       	ldi	r25, 0x0F	; 15
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <LCD_sendComnd+0x30>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <LCD_sendComnd+0x36>
     990:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	63 e0       	ldi	r22, 0x03	; 3
     996:	40 e0       	ldi	r20, 0x00	; 0
     998:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	
	private_WriteHalfPort(Cmnd);                                      //PORTA_REG= (PORTA_REG & 0x0f) | ((Cmnd & 0xf0) <<4)
     99c:	8c 2f       	mov	r24, r28
     99e:	0e 94 6d 04 	call	0x8da	; 0x8da <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	63 e0       	ldi	r22, 0x03	; 3
     9a6:	41 e0       	ldi	r20, 0x01	; 1
     9a8:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
     9ac:	8f e9       	ldi	r24, 0x9F	; 159
     9ae:	9f e0       	ldi	r25, 0x0F	; 15
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	f1 f7       	brne	.-4      	; 0x9b0 <LCD_sendComnd+0x56>
     9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <LCD_sendComnd+0x5c>
     9b6:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	63 e0       	ldi	r22, 0x03	; 3
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
	
}
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <LCD_init>:

void LCD_init(void)
{
	#if   LCD_MODE == LCD_FourBitMode 
	//SET PIN AS OUTPUT
	DIO_SetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	41 e0       	ldi	r20, 0x01	; 1
     9cc:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_OUTPUT);
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	62 e0       	ldi	r22, 0x02	; 2
     9d4:	41 e0       	ldi	r20, 0x01	; 1
     9d6:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_OUTPUT);
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	63 e0       	ldi	r22, 0x03	; 3
     9de:	41 e0       	ldi	r20, 0x01	; 1
     9e0:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	
	
	DIO_SetPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	64 e0       	ldi	r22, 0x04	; 4
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	65 e0       	ldi	r22, 0x05	; 5
     9f2:	41 e0       	ldi	r20, 0x01	; 1
     9f4:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	66 e0       	ldi	r22, 0x06	; 6
     9fc:	41 e0       	ldi	r20, 0x01	; 1
     9fe:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	67 e0       	ldi	r22, 0x07	; 7
     a06:	41 e0       	ldi	r20, 0x01	; 1
     a08:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
     a0c:	8f e7       	ldi	r24, 0x7F	; 127
     a0e:	95 eb       	ldi	r25, 0xB5	; 181
     a10:	a1 e0       	ldi	r26, 0x01	; 1
     a12:	81 50       	subi	r24, 0x01	; 1
     a14:	90 40       	sbci	r25, 0x00	; 0
     a16:	a0 40       	sbci	r26, 0x00	; 0
     a18:	e1 f7       	brne	.-8      	; 0xa12 <LCD_init+0x4c>
     a1a:	00 c0       	rjmp	.+0      	; 0xa1c <LCD_init+0x56>
     a1c:	00 00       	nop
	
	
	_delay_ms(35);
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	61 e0       	ldi	r22, 0x01	; 1
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	62 e0       	ldi	r22, 0x02	; 2
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	private_WriteHalfPort(LCD_COMMAND_FOR_FOUR_BIT_MODE);
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	0e 94 6d 04 	call	0x8da	; 0x8da <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	63 e0       	ldi	r22, 0x03	; 3
     a3c:	41 e0       	ldi	r20, 0x01	; 1
     a3e:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
     a42:	af e9       	ldi	r26, 0x9F	; 159
     a44:	bf e0       	ldi	r27, 0x0F	; 15
     a46:	11 97       	sbiw	r26, 0x01	; 1
     a48:	f1 f7       	brne	.-4      	; 0xa46 <LCD_init+0x80>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <LCD_init+0x86>
     a4c:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	63 e0       	ldi	r22, 0x03	; 3
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	
	LCD_sendComnd(LCD_FUNCTION_SET);
     a58:	88 e2       	ldi	r24, 0x28	; 40
     a5a:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a5e:	b0 ef       	ldi	r27, 0xF0	; 240
     a60:	ba 95       	dec	r27
     a62:	f1 f7       	brne	.-4      	; 0xa60 <LCD_init+0x9a>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DISPLAY_ON_OFF_CONTROL);
     a64:	8c e0       	ldi	r24, 0x0C	; 12
     a66:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_sendComnd>
     a6a:	80 ef       	ldi	r24, 0xF0	; 240
     a6c:	8a 95       	dec	r24
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <LCD_init+0xa6>
	_delay_us(45);
	
	LCD_sendComnd(LCD_DESPLAY_CLEAR);
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a76:	af e3       	ldi	r26, 0x3F	; 63
     a78:	bf e1       	ldi	r27, 0x1F	; 31
     a7a:	11 97       	sbiw	r26, 0x01	; 1
     a7c:	f1 f7       	brne	.-4      	; 0xa7a <LCD_init+0xb4>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <LCD_init+0xba>
     a80:	00 00       	nop
	_delay_ms(2);
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
     a82:	86 e0       	ldi	r24, 0x06	; 6
     a84:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a88:	b0 ef       	ldi	r27, 0xF0	; 240
     a8a:	ba 95       	dec	r27
     a8c:	f1 f7       	brne	.-4      	; 0xa8a <LCD_init+0xc4>
	
	LCD_sendComnd(LCD_ENTRY_MODE_SET);
	_delay_us(45);
	
	#endif
}
     a8e:	08 95       	ret

00000a90 <LCD_sendChar>:
	
}


void LCD_sendChar(u8 Character_Data)
{
     a90:	cf 93       	push	r28
     a92:	c8 2f       	mov	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	DIO_SetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	41 e0       	ldi	r20, 0x01	; 1
     a9a:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	62 e0       	ldi	r22, 0x02	; 2
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data>>4);                        //PORTA_REG= (PORTA_REG & 0x0f) | (Character_Data & 0xf0)
     aa8:	8c 2f       	mov	r24, r28
     aaa:	82 95       	swap	r24
     aac:	8f 70       	andi	r24, 0x0F	; 15
     aae:	0e 94 6d 04 	call	0x8da	; 0x8da <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	63 e0       	ldi	r22, 0x03	; 3
     ab6:	41 e0       	ldi	r20, 0x01	; 1
     ab8:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     abc:	8f e9       	ldi	r24, 0x9F	; 159
     abe:	9f e0       	ldi	r25, 0x0F	; 15
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <LCD_sendChar+0x30>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <LCD_sendChar+0x36>
     ac6:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	63 e0       	ldi	r22, 0x03	; 3
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	
	private_WriteHalfPort(Character_Data);                         //PORTA_REG= (PORTA_REG & 0x0f) | ((Character_Data & 0xf0) <<4)
     ad2:	8c 2f       	mov	r24, r28
     ad4:	0e 94 6d 04 	call	0x8da	; 0x8da <private_WriteHalfPort>
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	63 e0       	ldi	r22, 0x03	; 3
     adc:	41 e0       	ldi	r20, 0x01	; 1
     ade:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
     ae2:	8f e9       	ldi	r24, 0x9F	; 159
     ae4:	9f e0       	ldi	r25, 0x0F	; 15
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	f1 f7       	brne	.-4      	; 0xae6 <LCD_sendChar+0x56>
     aea:	00 c0       	rjmp	.+0      	; 0xaec <LCD_sendChar+0x5c>
     aec:	00 00       	nop
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	63 e0       	ldi	r22, 0x03	; 3
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
	_delay_ms(1);
	DIO_SetPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#endif
	
}
     af8:	cf 91       	pop	r28
     afa:	08 95       	ret

00000afc <LCD_SendString>:

void LCD_SendString (u8 *String_Data)
{
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	ec 01       	movw	r28, r24
	#if   LCD_MODE == LCD_FourBitMode
	while((*String_Data)!='\0')
     b02:	88 81       	ld	r24, Y
     b04:	88 23       	and	r24, r24
     b06:	31 f0       	breq	.+12     	; 0xb14 <LCD_SendString+0x18>
	
	#endif
	
}

void LCD_SendString (u8 *String_Data)
     b08:	21 96       	adiw	r28, 0x01	; 1
{
	#if   LCD_MODE == LCD_FourBitMode
	while((*String_Data)!='\0')
	{
		LCD_sendChar(*String_Data);
     b0a:	0e 94 48 05 	call	0xa90	; 0xa90 <LCD_sendChar>
}

void LCD_SendString (u8 *String_Data)
{
	#if   LCD_MODE == LCD_FourBitMode
	while((*String_Data)!='\0')
     b0e:	89 91       	ld	r24, Y+
     b10:	88 23       	and	r24, r24
     b12:	d9 f7       	brne	.-10     	; 0xb0a <LCD_SendString+0xe>
		LCD_sendChar(*String_Data);
		String_Data++;
	}
	#endif
	
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <LCD_ClearDesplay>:


void LCD_ClearDesplay()
{
	#if   LCD_MODE == LCD_FourBitMode
	LCD_sendComnd (LCD_DESPLAY_CLEAR);
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_sendComnd>
     b20:	8f e3       	ldi	r24, 0x3F	; 63
     b22:	9f e1       	ldi	r25, 0x1F	; 31
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <LCD_ClearDesplay+0xa>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <LCD_ClearDesplay+0x10>
     b2a:	00 00       	nop
	_delay_ms(2);
	LCD_sendComnd (LCD_Cursor_At_Home_position);
     b2c:	80 e8       	ldi	r24, 0x80	; 128
     b2e:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_sendComnd>
	_delay_ms(2);
	LCD_sendComnd (LCD_Cursor_At_Home_position);
	
	#endif
			
}
     b32:	08 95       	ret

00000b34 <LCD_GoToLocation>:

void LCD_GoToLocation(u8 X_Location, u8 LineNumber)
{
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	00 d0       	rcall	.+0      	; 0xb3a <LCD_GoToLocation+0x6>
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <LCD_GoToLocation+0x8>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
	#if   LCD_MODE == LCD_FourBitMode
	u8 FirstLocation[] = {0x80, 0xC0, 0x94, 0xD4};
     b40:	90 e8       	ldi	r25, 0x80	; 128
     b42:	99 83       	std	Y+1, r25	; 0x01
     b44:	90 ec       	ldi	r25, 0xC0	; 192
     b46:	9a 83       	std	Y+2, r25	; 0x02
     b48:	94 e9       	ldi	r25, 0x94	; 148
     b4a:	9b 83       	std	Y+3, r25	; 0x03
     b4c:	94 ed       	ldi	r25, 0xD4	; 212
     b4e:	9c 83       	std	Y+4, r25	; 0x04
	LCD_sendComnd(FirstLocation[LineNumber-1] + X_Location-1);
     b50:	81 50       	subi	r24, 0x01	; 1
     b52:	fe 01       	movw	r30, r28
     b54:	e6 0f       	add	r30, r22
     b56:	f1 1d       	adc	r31, r1
     b58:	90 81       	ld	r25, Z
     b5a:	89 0f       	add	r24, r25
     b5c:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_sendComnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b60:	8f e9       	ldi	r24, 0x9F	; 159
     b62:	9f e0       	ldi	r25, 0x0F	; 15
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <LCD_GoToLocation+0x30>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <LCD_GoToLocation+0x36>
     b6a:	00 00       	nop
	u8 FirstLocation[] = {0x80, 0xC0, 0x94, 0xD4};
	LCD_sendComnd(FirstLocation[LineNumber-1] + X_Location-1);
	_delay_us(1000);
	
	#endif
}
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <LCD_SendIntegarNumber>:

void LCD_SendIntegarNumber(u16 IntegerNumber)
{
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	a0 97       	sbiw	r28, 0x20	; 32
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
	#if   LCD_MODE == LCD_FourBitMode
	u16 NumberString[16];
	snprintf(NumberString,17,"%d",IntegerNumber);
     b92:	2d b7       	in	r18, 0x3d	; 61
     b94:	3e b7       	in	r19, 0x3e	; 62
     b96:	28 50       	subi	r18, 0x08	; 8
     b98:	30 40       	sbci	r19, 0x00	; 0
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	3e bf       	out	0x3e, r19	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	2d bf       	out	0x3d, r18	; 61
     ba4:	ed b7       	in	r30, 0x3d	; 61
     ba6:	fe b7       	in	r31, 0x3e	; 62
     ba8:	31 96       	adiw	r30, 0x01	; 1
     baa:	8e 01       	movw	r16, r28
     bac:	0f 5f       	subi	r16, 0xFF	; 255
     bae:	1f 4f       	sbci	r17, 0xFF	; 255
     bb0:	ad b7       	in	r26, 0x3d	; 61
     bb2:	be b7       	in	r27, 0x3e	; 62
     bb4:	12 96       	adiw	r26, 0x02	; 2
     bb6:	1c 93       	st	X, r17
     bb8:	0e 93       	st	-X, r16
     bba:	11 97       	sbiw	r26, 0x01	; 1
     bbc:	21 e1       	ldi	r18, 0x11	; 17
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	33 83       	std	Z+3, r19	; 0x03
     bc2:	22 83       	std	Z+2, r18	; 0x02
     bc4:	22 ed       	ldi	r18, 0xD2	; 210
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	35 83       	std	Z+5, r19	; 0x05
     bca:	24 83       	std	Z+4, r18	; 0x04
     bcc:	97 83       	std	Z+7, r25	; 0x07
     bce:	86 83       	std	Z+6, r24	; 0x06
     bd0:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <snprintf>
	LCD_SendString(NumberString);
     bd4:	2d b7       	in	r18, 0x3d	; 61
     bd6:	3e b7       	in	r19, 0x3e	; 62
     bd8:	28 5f       	subi	r18, 0xF8	; 248
     bda:	3f 4f       	sbci	r19, 0xFF	; 255
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	3e bf       	out	0x3e, r19	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	2d bf       	out	0x3d, r18	; 61
     be6:	c8 01       	movw	r24, r16
     be8:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
	snprintf(NumberString,17,"%d",IntegerNumber);
	LCD_SendString(NumberString);
	
	#endif
	
}
     bec:	a0 96       	adiw	r28, 0x20	; 32
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	08 95       	ret

00000c02 <LCD_SendNumberToLocation>:


void LCD_SendNumberToLocation(u16 Number,u8 X_Location, u8 LineNumber)
{
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	ec 01       	movw	r28, r24
     c08:	86 2f       	mov	r24, r22
	#if   LCD_MODE == LCD_FourBitMode
	LCD_GoToLocation(X_Location,LineNumber);
     c0a:	64 2f       	mov	r22, r20
     c0c:	0e 94 9a 05 	call	0xb34	; 0xb34 <LCD_GoToLocation>
	LCD_SendIntegarNumber(Number);
     c10:	ce 01       	movw	r24, r28
     c12:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_SendIntegarNumber>
	LCD_GoToLocation(X_Location,LineNumber);
	LCD_SendIntegarNumber(Number);
	
	#endif
	
}
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <LCD_SendFloatNumber>:

void LCD_SendFloatNumber(f32 FloatNumber)
{
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	a0 97       	sbiw	r28, 0x20	; 32
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
	#if   LCD_MODE == LCD_FourBitMode
	u16 NumberString[16];
	snprintf(NumberString,17,"%f",FloatNumber);
     c38:	2d b7       	in	r18, 0x3d	; 61
     c3a:	3e b7       	in	r19, 0x3e	; 62
     c3c:	2a 50       	subi	r18, 0x0A	; 10
     c3e:	30 40       	sbci	r19, 0x00	; 0
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	3e bf       	out	0x3e, r19	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	2d bf       	out	0x3d, r18	; 61
     c4a:	4d b7       	in	r20, 0x3d	; 61
     c4c:	5e b7       	in	r21, 0x3e	; 62
     c4e:	4f 5f       	subi	r20, 0xFF	; 255
     c50:	5f 4f       	sbci	r21, 0xFF	; 255
     c52:	8e 01       	movw	r16, r28
     c54:	0f 5f       	subi	r16, 0xFF	; 255
     c56:	1f 4f       	sbci	r17, 0xFF	; 255
     c58:	ed b7       	in	r30, 0x3d	; 61
     c5a:	fe b7       	in	r31, 0x3e	; 62
     c5c:	12 83       	std	Z+2, r17	; 0x02
     c5e:	01 83       	std	Z+1, r16	; 0x01
     c60:	21 e1       	ldi	r18, 0x11	; 17
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	fa 01       	movw	r30, r20
     c66:	33 83       	std	Z+3, r19	; 0x03
     c68:	22 83       	std	Z+2, r18	; 0x02
     c6a:	25 ed       	ldi	r18, 0xD5	; 213
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	35 83       	std	Z+5, r19	; 0x05
     c70:	24 83       	std	Z+4, r18	; 0x04
     c72:	86 83       	std	Z+6, r24	; 0x06
     c74:	97 83       	std	Z+7, r25	; 0x07
     c76:	a0 87       	std	Z+8, r26	; 0x08
     c78:	b1 87       	std	Z+9, r27	; 0x09
     c7a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <snprintf>
	LCD_SendString(NumberString);
     c7e:	2d b7       	in	r18, 0x3d	; 61
     c80:	3e b7       	in	r19, 0x3e	; 62
     c82:	26 5f       	subi	r18, 0xF6	; 246
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	3e bf       	out	0x3e, r19	; 62
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	2d bf       	out	0x3d, r18	; 61
     c90:	c8 01       	movw	r24, r16
     c92:	0e 94 7e 05 	call	0xafc	; 0xafc <LCD_SendString>
	snprintf(NumberString,17,"%f",FloatNumber);
	LCD_SendString(NumberString);
	
	#endif
	
}
     c96:	a0 96       	adiw	r28, 0x20	; 32
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <LCD_Shift>:

void LCD_Shift(u8 ShiftCmnd)
{
	#if   LCD_MODE == LCD_FourBitMode
	LCD_sendComnd(ShiftCmnd);
     cac:	0e 94 ad 04 	call	0x95a	; 0x95a <LCD_sendComnd>
	
	#elif LCD_MODE == LCD_EightBitMode
	LCD_sendComnd(ShiftCmnd);
	
	#endif
}
     cb0:	08 95       	ret

00000cb2 <LED_init>:
#include "../includes/LED_private.h"


void LED_init(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	28 f4       	brcc	.+10     	; 0xcc0 <LED_init+0xe>
     cb6:	68 30       	cpi	r22, 0x08	; 8
     cb8:	18 f4       	brcc	.+6      	; 0xcc0 <LED_init+0xe>
	{
		DIO_SetPinDirection(LedPort,LedPin,DIO_PIN_OUTPUT);
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
     cc0:	08 95       	ret

00000cc2 <LED_TurnON>:
}


void LED_TurnON(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     cc2:	84 30       	cpi	r24, 0x04	; 4
     cc4:	28 f4       	brcc	.+10     	; 0xcd0 <LED_TurnON+0xe>
     cc6:	68 30       	cpi	r22, 0x08	; 8
     cc8:	18 f4       	brcc	.+6      	; 0xcd0 <LED_TurnON+0xe>
	{
		DIO_SetPinValue(LedPort,LedPin,DIO_PIN_HIGH);
     cca:	41 e0       	ldi	r20, 0x01	; 1
     ccc:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
     cd0:	08 95       	ret

00000cd2 <LED_TurnOFF>:
}


void LED_TurnOFF(u8 LedPort,u8 LedPin)
{
	if (LedPort <=3 && LedPin<=7)
     cd2:	84 30       	cpi	r24, 0x04	; 4
     cd4:	28 f4       	brcc	.+10     	; 0xce0 <LED_TurnOFF+0xe>
     cd6:	68 30       	cpi	r22, 0x08	; 8
     cd8:	18 f4       	brcc	.+6      	; 0xce0 <LED_TurnOFF+0xe>
	{
		DIO_SetPinValue(LedPort,LedPin,DIO_PIN_LOW);
     cda:	40 e0       	ldi	r20, 0x00	; 0
     cdc:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
     ce0:	08 95       	ret

00000ce2 <LED_Toggle>:
}


void LED_Toggle(u8 LedPort,u8 LedPin)
{
	 if (LedPort <=3 && LedPin<=7)
     ce2:	84 30       	cpi	r24, 0x04	; 4
     ce4:	20 f4       	brcc	.+8      	; 0xcee <LED_Toggle+0xc>
     ce6:	68 30       	cpi	r22, 0x08	; 8
     ce8:	10 f4       	brcc	.+4      	; 0xcee <LED_Toggle+0xc>
	 {
		DIO_TogglePinValue(LedPort,LedPin);
     cea:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_TogglePinValue>
     cee:	08 95       	ret

00000cf0 <RELAY_init>:
#include "../includes/RELAY_private.h"


void RELAY_init(u8 RelayPort,u8 RelayPin)
{
	if (RelayPort <= 3 && RelayPin <=7 )
     cf0:	84 30       	cpi	r24, 0x04	; 4
     cf2:	28 f4       	brcc	.+10     	; 0xcfe <RELAY_init+0xe>
     cf4:	68 30       	cpi	r22, 0x08	; 8
     cf6:	18 f4       	brcc	.+6      	; 0xcfe <RELAY_init+0xe>
	{
		DIO_SetPinDirection(RelayPort,RelayPin,DIO_PIN_OUTPUT);
     cf8:	41 e0       	ldi	r20, 0x01	; 1
     cfa:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
     cfe:	08 95       	ret

00000d00 <RELAY_TurnON>:
	}
}

void RELAY_TurnON(u8 RelayPort,u8 RelayPin)
{
	if (RelayPort <= 3 && RelayPin <=7 )
     d00:	84 30       	cpi	r24, 0x04	; 4
     d02:	28 f4       	brcc	.+10     	; 0xd0e <RELAY_TurnON+0xe>
     d04:	68 30       	cpi	r22, 0x08	; 8
     d06:	18 f4       	brcc	.+6      	; 0xd0e <RELAY_TurnON+0xe>
	{
		DIO_SetPinValue(RelayPort,RelayPin,DIO_PIN_HIGH);
     d08:	41 e0       	ldi	r20, 0x01	; 1
     d0a:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
     d0e:	08 95       	ret

00000d10 <RELAY_TurnOFF>:
	}
}

void RELAY_TurnOFF(u8 RelayPort,u8 RelayPin)
{
	if (RelayPort <= 3 && RelayPin <=7 )
     d10:	84 30       	cpi	r24, 0x04	; 4
     d12:	28 f4       	brcc	.+10     	; 0xd1e <RELAY_TurnOFF+0xe>
     d14:	68 30       	cpi	r22, 0x08	; 8
     d16:	18 f4       	brcc	.+6      	; 0xd1e <RELAY_TurnOFF+0xe>
	{
		DIO_SetPinValue(RelayPort,RelayPin,DIO_PIN_LOW);
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_SetPinValue>
     d1e:	08 95       	ret

00000d20 <RELAY_Toggle>:
	}
}

void RELAY_Toggle(u8 RelayPort,u8 RelayPin)
{
	if (RelayPort <= 3 && RelayPin <=7 )
     d20:	84 30       	cpi	r24, 0x04	; 4
     d22:	20 f4       	brcc	.+8      	; 0xd2c <RELAY_Toggle+0xc>
     d24:	68 30       	cpi	r22, 0x08	; 8
     d26:	10 f4       	brcc	.+4      	; 0xd2c <RELAY_Toggle+0xc>
	{
		DIO_TogglePinValue(RelayPort,RelayPin);
     d28:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <DIO_TogglePinValue>
     d2c:	08 95       	ret

00000d2e <SERVO_init>:
#include "../includes/SERVO_private.h"


void SERVO_init(void)
{
	DIO_SetPinDirection(TMR1_OC1A_PORT,TMR1_OC1A_PIN,DIO_PIN_OUTPUT);
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	65 e0       	ldi	r22, 0x05	; 5
     d32:	41 e0       	ldi	r20, 0x01	; 1
     d34:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	DIO_SetPinDirection(TMR1_OC1B_PORT,TMR1_OC1B_PIN,DIO_PIN_OUTPUT);
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	64 e0       	ldi	r22, 0x04	; 4
     d3c:	41 e0       	ldi	r20, 0x01	; 1
     d3e:	0e 94 bc 06 	call	0xd78	; 0xd78 <DIO_SetPinDirection>
	TMR1_init();
     d42:	0e 94 0c 0a 	call	0x1418	; 0x1418 <TMR1_init>
}
     d46:	08 95       	ret

00000d48 <SERVO_TurnON>:

void SERVO_TurnON(f32 Angle)
{	
	f32 DutyCycle;
	DutyCycle=5.0+(Angle/36.0);
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e1       	ldi	r20, 0x10	; 16
     d4e:	52 e4       	ldi	r21, 0x42	; 66
     d50:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__divsf3>
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 ea       	ldi	r20, 0xA0	; 160
     d5a:	50 e4       	ldi	r21, 0x40	; 64
     d5c:	0e 94 39 0b 	call	0x1672	; 0x1672 <__addsf3>
     d60:	ab 01       	movw	r20, r22
     d62:	bc 01       	movw	r22, r24
	TMR1_SetDutyCycle_And_Freq_Value(50,DutyCycle);
     d64:	82 e3       	ldi	r24, 0x32	; 50
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 39 0a 	call	0x1472	; 0x1472 <TMR1_SetDutyCycle_And_Freq_Value>
	TMR1_Start();
     d6c:	0e 94 25 0a 	call	0x144a	; 0x144a <TMR1_Start>
}
     d70:	08 95       	ret

00000d72 <SERVO_TurnOFF>:

void SERVO_TurnOFF()
{
	TMR1_Stop();	
     d72:	0e 94 2f 0a 	call	0x145e	; 0x145e <TMR1_Stop>
}
     d76:	08 95       	ret

00000d78 <DIO_SetPinDirection>:


DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
     d78:	84 30       	cpi	r24, 0x04	; 4
     d7a:	08 f0       	brcs	.+2      	; 0xd7e <DIO_SetPinDirection+0x6>
     d7c:	8b c0       	rjmp	.+278    	; 0xe94 <DIO_SetPinDirection+0x11c>
     d7e:	68 30       	cpi	r22, 0x08	; 8
     d80:	08 f0       	brcs	.+2      	; 0xd84 <DIO_SetPinDirection+0xc>
     d82:	8a c0       	rjmp	.+276    	; 0xe98 <DIO_SetPinDirection+0x120>
     d84:	42 30       	cpi	r20, 0x02	; 2
     d86:	08 f0       	brcs	.+2      	; 0xd8a <DIO_SetPinDirection+0x12>
     d88:	89 c0       	rjmp	.+274    	; 0xe9c <DIO_SetPinDirection+0x124>
	{
    	switch(PortId)
     d8a:	81 30       	cpi	r24, 0x01	; 1
     d8c:	41 f1       	breq	.+80     	; 0xdde <DIO_SetPinDirection+0x66>
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	38 f0       	brcs	.+14     	; 0xda0 <DIO_SetPinDirection+0x28>
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	09 f4       	brne	.+2      	; 0xd98 <DIO_SetPinDirection+0x20>
     d96:	41 c0       	rjmp	.+130    	; 0xe1a <DIO_SetPinDirection+0xa2>
     d98:	83 30       	cpi	r24, 0x03	; 3
     d9a:	09 f0       	breq	.+2      	; 0xd9e <DIO_SetPinDirection+0x26>
     d9c:	81 c0       	rjmp	.+258    	; 0xea0 <DIO_SetPinDirection+0x128>
     d9e:	5b c0       	rjmp	.+182    	; 0xe56 <DIO_SetPinDirection+0xde>
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
     da0:	41 30       	cpi	r20, 0x01	; 1
     da2:	71 f4       	brne	.+28     	; 0xdc0 <DIO_SetPinDirection+0x48>
     da4:	2a b3       	in	r18, 0x1a	; 26
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	ac 01       	movw	r20, r24
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_SetPinDirection+0x3a>
     dae:	44 0f       	add	r20, r20
     db0:	55 1f       	adc	r21, r21
     db2:	6a 95       	dec	r22
     db4:	e2 f7       	brpl	.-8      	; 0xdae <DIO_SetPinDirection+0x36>
     db6:	ba 01       	movw	r22, r20
     db8:	62 2b       	or	r22, r18
     dba:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PInDirection<=DIO_PIN_OUTPUT))
	{
    	switch(PortId)
    	{
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
     dc0:	2a b3       	in	r18, 0x1a	; 26
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	ac 01       	movw	r20, r24
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <DIO_SetPinDirection+0x56>
     dca:	44 0f       	add	r20, r20
     dcc:	55 1f       	adc	r21, r21
     dce:	6a 95       	dec	r22
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <DIO_SetPinDirection+0x52>
     dd2:	ba 01       	movw	r22, r20
     dd4:	60 95       	com	r22
     dd6:	62 23       	and	r22, r18
     dd8:	6a bb       	out	0x1a, r22	; 26



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
     dde:	41 30       	cpi	r20, 0x01	; 1
     de0:	69 f4       	brne	.+26     	; 0xdfc <DIO_SetPinDirection+0x84>
     de2:	47 b3       	in	r20, 0x17	; 23
     de4:	21 e0       	ldi	r18, 0x01	; 1
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	c9 01       	movw	r24, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <DIO_SetPinDirection+0x78>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	6a 95       	dec	r22
     df2:	e2 f7       	brpl	.-8      	; 0xdec <DIO_SetPinDirection+0x74>
     df4:	84 2b       	or	r24, r20
     df6:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	08 95       	ret
		   case DIO_PORTA:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRA_REG,PinId)) : (CLR_BIT(DDRA_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
     dfc:	27 b3       	in	r18, 0x17	; 23
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	ac 01       	movw	r20, r24
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_SetPinDirection+0x92>
     e06:	44 0f       	add	r20, r20
     e08:	55 1f       	adc	r21, r21
     e0a:	6a 95       	dec	r22
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_SetPinDirection+0x8e>
     e0e:	ba 01       	movw	r22, r20
     e10:	60 95       	com	r22
     e12:	62 23       	and	r22, r18
     e14:	67 bb       	out	0x17, r22	; 23



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
     e1a:	41 30       	cpi	r20, 0x01	; 1
     e1c:	69 f4       	brne	.+26     	; 0xe38 <DIO_SetPinDirection+0xc0>
     e1e:	44 b3       	in	r20, 0x14	; 20
     e20:	21 e0       	ldi	r18, 0x01	; 1
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	c9 01       	movw	r24, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_SetPinDirection+0xb4>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	6a 95       	dec	r22
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_SetPinDirection+0xb0>
     e30:	84 2b       	or	r24, r20
     e32:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	08 95       	ret
		   case DIO_PORTB:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRB_REG,PinId)) : (CLR_BIT(DDRB_REG,PinId)) ;
		   break;
		   
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
     e38:	24 b3       	in	r18, 0x14	; 20
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	ac 01       	movw	r20, r24
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_SetPinDirection+0xce>
     e42:	44 0f       	add	r20, r20
     e44:	55 1f       	adc	r21, r21
     e46:	6a 95       	dec	r22
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_SetPinDirection+0xca>
     e4a:	ba 01       	movw	r22, r20
     e4c:	60 95       	com	r22
     e4e:	62 23       	and	r22, r18
     e50:	64 bb       	out	0x14, r22	; 20



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
     e56:	41 30       	cpi	r20, 0x01	; 1
     e58:	71 f4       	brne	.+28     	; 0xe76 <DIO_SetPinDirection+0xfe>
     e5a:	21 b3       	in	r18, 0x11	; 17
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	ac 01       	movw	r20, r24
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_SetPinDirection+0xf0>
     e64:	44 0f       	add	r20, r20
     e66:	55 1f       	adc	r21, r21
     e68:	6a 95       	dec	r22
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_SetPinDirection+0xec>
     e6c:	ba 01       	movw	r22, r20
     e6e:	62 2b       	or	r22, r18
     e70:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	08 95       	ret
		   case DIO_PORTC:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRC_REG,PinId)) :(CLR_BIT(DDRC_REG,PinId));
		   break;
		   
		   case DIO_PORTD:
		   (DIO_PIN_OUTPUT == PInDirection) ? (SET_BIT(DDRD_REG,PinId)) : (CLR_BIT(DDRD_REG,PinId));
     e76:	21 b3       	in	r18, 0x11	; 17
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	ac 01       	movw	r20, r24
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_SetPinDirection+0x10c>
     e80:	44 0f       	add	r20, r20
     e82:	55 1f       	adc	r21, r21
     e84:	6a 95       	dec	r22
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_SetPinDirection+0x108>
     e88:	ba 01       	movw	r22, r20
     e8a:	60 95       	com	r22
     e8c:	62 23       	and	r22, r18
     e8e:	61 bb       	out	0x11, r22	; 17



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	08 95       	ret
		   break;
	    }	
	} 
	else
	{
		ErrorStatus = DIO_NOK;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	08 95       	ret
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	08 95       	ret
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	08 95       	ret



DIO_ERRORSTATUS DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PInDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;     
     ea0:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     ea2:	08 95       	ret

00000ea4 <DIO_SetPinValue>:

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	08 f0       	brcs	.+2      	; 0xeaa <DIO_SetPinValue+0x6>
     ea8:	8b c0       	rjmp	.+278    	; 0xfc0 <DIO_SetPinValue+0x11c>
     eaa:	68 30       	cpi	r22, 0x08	; 8
     eac:	08 f0       	brcs	.+2      	; 0xeb0 <DIO_SetPinValue+0xc>
     eae:	8a c0       	rjmp	.+276    	; 0xfc4 <DIO_SetPinValue+0x120>
     eb0:	42 30       	cpi	r20, 0x02	; 2
     eb2:	08 f0       	brcs	.+2      	; 0xeb6 <DIO_SetPinValue+0x12>
     eb4:	89 c0       	rjmp	.+274    	; 0xfc8 <DIO_SetPinValue+0x124>
	{
			switch (PortId)
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	41 f1       	breq	.+80     	; 0xf0a <DIO_SetPinValue+0x66>
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	38 f0       	brcs	.+14     	; 0xecc <DIO_SetPinValue+0x28>
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	09 f4       	brne	.+2      	; 0xec4 <DIO_SetPinValue+0x20>
     ec2:	41 c0       	rjmp	.+130    	; 0xf46 <DIO_SetPinValue+0xa2>
     ec4:	83 30       	cpi	r24, 0x03	; 3
     ec6:	09 f0       	breq	.+2      	; 0xeca <DIO_SetPinValue+0x26>
     ec8:	81 c0       	rjmp	.+258    	; 0xfcc <DIO_SetPinValue+0x128>
     eca:	5b c0       	rjmp	.+182    	; 0xf82 <DIO_SetPinValue+0xde>
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
     ecc:	41 30       	cpi	r20, 0x01	; 1
     ece:	71 f4       	brne	.+28     	; 0xeec <DIO_SetPinValue+0x48>
     ed0:	2b b3       	in	r18, 0x1b	; 27
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	ac 01       	movw	r20, r24
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_SetPinValue+0x3a>
     eda:	44 0f       	add	r20, r20
     edc:	55 1f       	adc	r21, r21
     ede:	6a 95       	dec	r22
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_SetPinValue+0x36>
     ee2:	ba 01       	movw	r22, r20
     ee4:	62 2b       	or	r22, r18
     ee6:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	08 95       	ret
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue<=DIO_PIN_HIGH))
	{
			switch (PortId)
			{
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
     eec:	2b b3       	in	r18, 0x1b	; 27
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	ac 01       	movw	r20, r24
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_SetPinValue+0x56>
     ef6:	44 0f       	add	r20, r20
     ef8:	55 1f       	adc	r21, r21
     efa:	6a 95       	dec	r22
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_SetPinValue+0x52>
     efe:	ba 01       	movw	r22, r20
     f00:	60 95       	com	r22
     f02:	62 23       	and	r22, r18
     f04:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
     f0a:	41 30       	cpi	r20, 0x01	; 1
     f0c:	69 f4       	brne	.+26     	; 0xf28 <DIO_SetPinValue+0x84>
     f0e:	48 b3       	in	r20, 0x18	; 24
     f10:	21 e0       	ldi	r18, 0x01	; 1
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	c9 01       	movw	r24, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_SetPinValue+0x78>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	6a 95       	dec	r22
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_SetPinValue+0x74>
     f20:	84 2b       	or	r24, r20
     f22:	88 bb       	out	0x18, r24	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	08 95       	ret
				case DIO_PORTA:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTA_REG,PinId)) : (CLR_BIT(PORTA_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
     f28:	28 b3       	in	r18, 0x18	; 24
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	ac 01       	movw	r20, r24
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_SetPinValue+0x92>
     f32:	44 0f       	add	r20, r20
     f34:	55 1f       	adc	r21, r21
     f36:	6a 95       	dec	r22
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <DIO_SetPinValue+0x8e>
     f3a:	ba 01       	movw	r22, r20
     f3c:	60 95       	com	r22
     f3e:	62 23       	and	r22, r18
     f40:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
     f46:	41 30       	cpi	r20, 0x01	; 1
     f48:	69 f4       	brne	.+26     	; 0xf64 <DIO_SetPinValue+0xc0>
     f4a:	45 b3       	in	r20, 0x15	; 21
     f4c:	21 e0       	ldi	r18, 0x01	; 1
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	c9 01       	movw	r24, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_SetPinValue+0xb4>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	6a 95       	dec	r22
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_SetPinValue+0xb0>
     f5c:	84 2b       	or	r24, r20
     f5e:	85 bb       	out	0x15, r24	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	08 95       	ret
			    case DIO_PORTB:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTB_REG,PinId)) : (CLR_BIT(PORTB_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
     f64:	25 b3       	in	r18, 0x15	; 21
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	ac 01       	movw	r20, r24
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <DIO_SetPinValue+0xce>
     f6e:	44 0f       	add	r20, r20
     f70:	55 1f       	adc	r21, r21
     f72:	6a 95       	dec	r22
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <DIO_SetPinValue+0xca>
     f76:	ba 01       	movw	r22, r20
     f78:	60 95       	com	r22
     f7a:	62 23       	and	r22, r18
     f7c:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
     f82:	41 30       	cpi	r20, 0x01	; 1
     f84:	71 f4       	brne	.+28     	; 0xfa2 <DIO_SetPinValue+0xfe>
     f86:	22 b3       	in	r18, 0x12	; 18
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	ac 01       	movw	r20, r24
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_SetPinValue+0xf0>
     f90:	44 0f       	add	r20, r20
     f92:	55 1f       	adc	r21, r21
     f94:	6a 95       	dec	r22
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_SetPinValue+0xec>
     f98:	ba 01       	movw	r22, r20
     f9a:	62 2b       	or	r22, r18
     f9c:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	08 95       	ret
			    case DIO_PORTC:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTC_REG,PinId)) : (CLR_BIT(PORTC_REG,PinId)) ;
			    break;
			    
			    case DIO_PORTD:
			    (DIO_PIN_HIGH == PinValue ) ? (SET_BIT(PORTD_REG,PinId)) : (CLR_BIT(PORTD_REG,PinId)) ;
     fa2:	22 b3       	in	r18, 0x12	; 18
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	ac 01       	movw	r20, r24
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_SetPinValue+0x10c>
     fac:	44 0f       	add	r20, r20
     fae:	55 1f       	adc	r21, r21
     fb0:	6a 95       	dec	r22
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_SetPinValue+0x108>
     fb4:	ba 01       	movw	r22, r20
     fb6:	60 95       	com	r22
     fb8:	62 23       	and	r22, r18
     fba:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	08 95       	ret
			    break;
			}	
		} 
	else
	{
		ErrorStatus = DIO_NOK;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	08 95       	ret
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	08 95       	ret
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	08 95       	ret
	return ErrorStatus;
}

DIO_ERRORSTATUS DIO_SetPinValue(u8 PortId,u8 PinId,u8 PinValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;
     fcc:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
     fce:	08 95       	ret

00000fd0 <DIO_TogglePinValue>:
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))  //edit all
     fd0:	84 30       	cpi	r24, 0x04	; 4
     fd2:	08 f0       	brcs	.+2      	; 0xfd6 <DIO_TogglePinValue+0x6>
     fd4:	45 c0       	rjmp	.+138    	; 0x1060 <DIO_TogglePinValue+0x90>
     fd6:	68 30       	cpi	r22, 0x08	; 8
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <DIO_TogglePinValue+0xc>
     fda:	44 c0       	rjmp	.+136    	; 0x1064 <DIO_TogglePinValue+0x94>
	{
		switch (PortId)
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	b1 f0       	breq	.+44     	; 0x100c <DIO_TogglePinValue+0x3c>
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	30 f0       	brcs	.+12     	; 0xff0 <DIO_TogglePinValue+0x20>
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	01 f1       	breq	.+64     	; 0x1028 <DIO_TogglePinValue+0x58>
     fe8:	83 30       	cpi	r24, 0x03	; 3
     fea:	09 f0       	breq	.+2      	; 0xfee <DIO_TogglePinValue+0x1e>
     fec:	3d c0       	rjmp	.+122    	; 0x1068 <DIO_TogglePinValue+0x98>
     fee:	2a c0       	rjmp	.+84     	; 0x1044 <DIO_TogglePinValue+0x74>
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
     ff0:	2b b3       	in	r18, 0x1b	; 27
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	ac 01       	movw	r20, r24
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_TogglePinValue+0x2e>
     ffa:	44 0f       	add	r20, r20
     ffc:	55 1f       	adc	r21, r21
     ffe:	6a 95       	dec	r22
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_TogglePinValue+0x2a>
    1002:	ba 01       	movw	r22, r20
    1004:	62 27       	eor	r22, r18
    1006:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    1008:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			TGL_BIT(PORTA_REG,PinId);
			break;
    100a:	08 95       	ret
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
    100c:	28 b3       	in	r18, 0x18	; 24
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	ac 01       	movw	r20, r24
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_TogglePinValue+0x4a>
    1016:	44 0f       	add	r20, r20
    1018:	55 1f       	adc	r21, r21
    101a:	6a 95       	dec	r22
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_TogglePinValue+0x46>
    101e:	ba 01       	movw	r22, r20
    1020:	62 27       	eor	r22, r18
    1022:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    1024:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTA_REG,PinId);
			break;
			
			case DIO_PORTB:
			TGL_BIT(PORTB_REG,PinId);
			break;
    1026:	08 95       	ret
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
    1028:	25 b3       	in	r18, 0x15	; 21
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	ac 01       	movw	r20, r24
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_TogglePinValue+0x66>
    1032:	44 0f       	add	r20, r20
    1034:	55 1f       	adc	r21, r21
    1036:	6a 95       	dec	r22
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_TogglePinValue+0x62>
    103a:	ba 01       	movw	r22, r20
    103c:	62 27       	eor	r22, r18
    103e:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    1040:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTB_REG,PinId);
			break;
			
			case DIO_PORTC:
			TGL_BIT(PORTC_REG,PinId);
			break;
    1042:	08 95       	ret
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
    1044:	22 b3       	in	r18, 0x12	; 18
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	ac 01       	movw	r20, r24
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_TogglePinValue+0x82>
    104e:	44 0f       	add	r20, r20
    1050:	55 1f       	adc	r21, r21
    1052:	6a 95       	dec	r22
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_TogglePinValue+0x7e>
    1056:	ba 01       	movw	r22, r20
    1058:	62 27       	eor	r22, r18
    105a:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    105c:	80 e0       	ldi	r24, 0x00	; 0
			TGL_BIT(PORTC_REG,PinId);
			break;
			
			case DIO_PORTD:
			TGL_BIT(PORTD_REG,PinId);
			break;
    105e:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	08 95       	ret
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	08 95       	ret
	return ErrorStatus;
}
	
DIO_ERRORSTATUS DIO_TogglePinValue    (u8 PortId ,u8 PinId) //To Test Work Or not 
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK ;              
    1068:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    106a:	08 95       	ret

0000106c <DIO_ReadValue>:
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7) && (PinValue!=NULL)) //wild pointer 
    106c:	84 30       	cpi	r24, 0x04	; 4
    106e:	08 f0       	brcs	.+2      	; 0x1072 <DIO_ReadValue+0x6>
    1070:	49 c0       	rjmp	.+146    	; 0x1104 <DIO_ReadValue+0x98>
    1072:	68 30       	cpi	r22, 0x08	; 8
    1074:	08 f0       	brcs	.+2      	; 0x1078 <DIO_ReadValue+0xc>
    1076:	48 c0       	rjmp	.+144    	; 0x1108 <DIO_ReadValue+0x9c>
    1078:	41 15       	cp	r20, r1
    107a:	51 05       	cpc	r21, r1
    107c:	09 f4       	brne	.+2      	; 0x1080 <DIO_ReadValue+0x14>
    107e:	46 c0       	rjmp	.+140    	; 0x110c <DIO_ReadValue+0xa0>
	{
		switch (PortId)
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	b1 f0       	breq	.+44     	; 0x10b0 <DIO_ReadValue+0x44>
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	30 f0       	brcs	.+12     	; 0x1094 <DIO_ReadValue+0x28>
    1088:	82 30       	cpi	r24, 0x02	; 2
    108a:	01 f1       	breq	.+64     	; 0x10cc <DIO_ReadValue+0x60>
    108c:	83 30       	cpi	r24, 0x03	; 3
    108e:	09 f0       	breq	.+2      	; 0x1092 <DIO_ReadValue+0x26>
    1090:	3f c0       	rjmp	.+126    	; 0x1110 <DIO_ReadValue+0xa4>
    1092:	2a c0       	rjmp	.+84     	; 0x10e8 <DIO_ReadValue+0x7c>
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
    1094:	89 b3       	in	r24, 0x19	; 25
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	9c 01       	movw	r18, r24
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_ReadValue+0x34>
    109c:	35 95       	asr	r19
    109e:	27 95       	ror	r18
    10a0:	6a 95       	dec	r22
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_ReadValue+0x30>
    10a4:	b9 01       	movw	r22, r18
    10a6:	61 70       	andi	r22, 0x01	; 1
    10a8:	fa 01       	movw	r30, r20
    10aa:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    10ac:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (PortId)
		{
			case DIO_PORTA:
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
    10ae:	08 95       	ret
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
    10b0:	86 b3       	in	r24, 0x16	; 22
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9c 01       	movw	r18, r24
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_ReadValue+0x50>
    10b8:	35 95       	asr	r19
    10ba:	27 95       	ror	r18
    10bc:	6a 95       	dec	r22
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_ReadValue+0x4c>
    10c0:	b9 01       	movw	r22, r18
    10c2:	61 70       	andi	r22, 0x01	; 1
    10c4:	fa 01       	movw	r30, r20
    10c6:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    10c8:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINA_REG,PinId);
			break;
			
			case DIO_PORTB:
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
    10ca:	08 95       	ret
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
    10cc:	83 b3       	in	r24, 0x13	; 19
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9c 01       	movw	r18, r24
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_ReadValue+0x6c>
    10d4:	35 95       	asr	r19
    10d6:	27 95       	ror	r18
    10d8:	6a 95       	dec	r22
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_ReadValue+0x68>
    10dc:	b9 01       	movw	r22, r18
    10de:	61 70       	andi	r22, 0x01	; 1
    10e0:	fa 01       	movw	r30, r20
    10e2:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    10e4:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINB_REG,PinId);
			break;
			
			case DIO_PORTC:
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
    10e6:	08 95       	ret
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
    10e8:	80 b3       	in	r24, 0x10	; 16
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	9c 01       	movw	r18, r24
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_ReadValue+0x88>
    10f0:	35 95       	asr	r19
    10f2:	27 95       	ror	r18
    10f4:	6a 95       	dec	r22
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_ReadValue+0x84>
    10f8:	b9 01       	movw	r22, r18
    10fa:	61 70       	andi	r22, 0x01	; 1
    10fc:	fa 01       	movw	r30, r20
    10fe:	60 83       	st	Z, r22
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1100:	80 e0       	ldi	r24, 0x00	; 0
			*PinValue= GET_BIT(PINC_REG,PinId);
			break;
			
			case DIO_PORTD:
			*PinValue= GET_BIT(PIND_REG,PinId);
			break;
    1102:	08 95       	ret
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	08 95       	ret
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	08 95       	ret
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	08 95       	ret
}
	
	
DIO_ERRORSTATUS DIO_ReadValue (u8 PortId,u8 PinId , u8* PinValue )
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1110:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    1112:	08 95       	ret

00001114 <DIO_activePinInPullUpResistance>:
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	 if ((PortId <= DIO_PORTD) && (PinId <= DIO_PIN7))
    1114:	84 30       	cpi	r24, 0x04	; 4
    1116:	08 f0       	brcs	.+2      	; 0x111a <DIO_activePinInPullUpResistance+0x6>
    1118:	45 c0       	rjmp	.+138    	; 0x11a4 <DIO_activePinInPullUpResistance+0x90>
    111a:	68 30       	cpi	r22, 0x08	; 8
    111c:	08 f0       	brcs	.+2      	; 0x1120 <DIO_activePinInPullUpResistance+0xc>
    111e:	44 c0       	rjmp	.+136    	; 0x11a8 <DIO_activePinInPullUpResistance+0x94>
	 {
		 switch(PortId)
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	b1 f0       	breq	.+44     	; 0x1150 <DIO_activePinInPullUpResistance+0x3c>
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	30 f0       	brcs	.+12     	; 0x1134 <DIO_activePinInPullUpResistance+0x20>
    1128:	82 30       	cpi	r24, 0x02	; 2
    112a:	01 f1       	breq	.+64     	; 0x116c <DIO_activePinInPullUpResistance+0x58>
    112c:	83 30       	cpi	r24, 0x03	; 3
    112e:	09 f0       	breq	.+2      	; 0x1132 <DIO_activePinInPullUpResistance+0x1e>
    1130:	3d c0       	rjmp	.+122    	; 0x11ac <DIO_activePinInPullUpResistance+0x98>
    1132:	2a c0       	rjmp	.+84     	; 0x1188 <DIO_activePinInPullUpResistance+0x74>
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
    1134:	2b b3       	in	r18, 0x1b	; 27
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	ac 01       	movw	r20, r24
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_activePinInPullUpResistance+0x2e>
    113e:	44 0f       	add	r20, r20
    1140:	55 1f       	adc	r21, r21
    1142:	6a 95       	dec	r22
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_activePinInPullUpResistance+0x2a>
    1146:	ba 01       	movw	r22, r20
    1148:	62 2b       	or	r22, r18
    114a:	6b bb       	out	0x1b, r22	; 27
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    114c:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 switch(PortId)
		 {
			 case DIO_PORTA:
			 SET_BIT(PORTA_REG,PinId);
			 break;
    114e:	08 95       	ret
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
    1150:	28 b3       	in	r18, 0x18	; 24
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	ac 01       	movw	r20, r24
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_activePinInPullUpResistance+0x4a>
    115a:	44 0f       	add	r20, r20
    115c:	55 1f       	adc	r21, r21
    115e:	6a 95       	dec	r22
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_activePinInPullUpResistance+0x46>
    1162:	ba 01       	movw	r22, r20
    1164:	62 2b       	or	r22, r18
    1166:	68 bb       	out	0x18, r22	; 24
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1168:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTA_REG,PinId);
			 break;
			 
			 case DIO_PORTB:
			 SET_BIT(PORTB_REG,PinId);
			 break;
    116a:	08 95       	ret
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
    116c:	25 b3       	in	r18, 0x15	; 21
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	ac 01       	movw	r20, r24
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_activePinInPullUpResistance+0x66>
    1176:	44 0f       	add	r20, r20
    1178:	55 1f       	adc	r21, r21
    117a:	6a 95       	dec	r22
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_activePinInPullUpResistance+0x62>
    117e:	ba 01       	movw	r22, r20
    1180:	62 2b       	or	r22, r18
    1182:	65 bb       	out	0x15, r22	; 21
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1184:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTB_REG,PinId);
			 break;
			 
			 case DIO_PORTC:
			 SET_BIT(PORTC_REG,PinId);
			 break;
    1186:	08 95       	ret
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
    1188:	22 b3       	in	r18, 0x12	; 18
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	ac 01       	movw	r20, r24
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_activePinInPullUpResistance+0x82>
    1192:	44 0f       	add	r20, r20
    1194:	55 1f       	adc	r21, r21
    1196:	6a 95       	dec	r22
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_activePinInPullUpResistance+0x7e>
    119a:	ba 01       	movw	r22, r20
    119c:	62 2b       	or	r22, r18
    119e:	62 bb       	out	0x12, r22	; 18
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    11a0:	80 e0       	ldi	r24, 0x00	; 0
			 SET_BIT(PORTC_REG,PinId);
			 break;
			 
			 case DIO_PORTD:
			 SET_BIT(PORTD_REG,PinId);
			 break;
    11a2:	08 95       	ret
	      } 
	 }	 
	 else
	 {
		ErrorStatus = DIO_NOK;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	08 95       	ret
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	08 95       	ret
	return ErrorStatus;
}
 
 DIO_ERRORSTATUS  DIO_activePinInPullUpResistance ( u8 PortId ,u8 PinId)
{
	 DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    11ac:	80 e0       	ldi	r24, 0x00	; 0
	 else
	 {
		ErrorStatus = DIO_NOK;
	 }
	 return ErrorStatus;
}
    11ae:	08 95       	ret

000011b0 <DIO_setPortDirection>:


DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	a8 f5       	brcc	.+106    	; 0x121e <DIO_setPortDirection+0x6e>
	{
		switch(PortId)
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	91 f0       	breq	.+36     	; 0x11dc <DIO_setPortDirection+0x2c>
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	28 f0       	brcs	.+10     	; 0x11c6 <DIO_setPortDirection+0x16>
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	c9 f0       	breq	.+50     	; 0x11f2 <DIO_setPortDirection+0x42>
    11c0:	83 30       	cpi	r24, 0x03	; 3
    11c2:	79 f5       	brne	.+94     	; 0x1222 <DIO_setPortDirection+0x72>
    11c4:	21 c0       	rjmp	.+66     	; 0x1208 <DIO_setPortDirection+0x58>
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
    11c6:	6f 3f       	cpi	r22, 0xFF	; 255
    11c8:	29 f4       	brne	.+10     	; 0x11d4 <DIO_setPortDirection+0x24>
    11ca:	8a b3       	in	r24, 0x1a	; 26
    11cc:	8f ef       	ldi	r24, 0xFF	; 255
    11ce:	8a bb       	out	0x1a, r24	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	08 95       	ret
	if ( (PortId<=DIO_PORTD))
	{
		switch(PortId)
		{
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
    11d4:	8a b3       	in	r24, 0x1a	; 26
    11d6:	1a ba       	out	0x1a, r1	; 26



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
    11dc:	6f 3f       	cpi	r22, 0xFF	; 255
    11de:	29 f4       	brne	.+10     	; 0x11ea <DIO_setPortDirection+0x3a>
    11e0:	87 b3       	in	r24, 0x17	; 23
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
    11e4:	87 bb       	out	0x17, r24	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	08 95       	ret
			case DIO_PORTA:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRA_REG)):(CLR_REG(DDRA_REG));
			break;
			
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
    11ea:	87 b3       	in	r24, 0x17	; 23
    11ec:	17 ba       	out	0x17, r1	; 23



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
    11f2:	6f 3f       	cpi	r22, 0xFF	; 255
    11f4:	29 f4       	brne	.+10     	; 0x1200 <DIO_setPortDirection+0x50>
    11f6:	84 b3       	in	r24, 0x14	; 20
    11f8:	8f ef       	ldi	r24, 0xFF	; 255
    11fa:	84 bb       	out	0x14, r24	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	08 95       	ret
			case DIO_PORTB:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRB_REG)):(CLR_REG(DDRB_REG));
			break;
			
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
    1200:	84 b3       	in	r24, 0x14	; 20
    1202:	14 ba       	out	0x14, r1	; 20



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
    1208:	6f 3f       	cpi	r22, 0xFF	; 255
    120a:	29 f4       	brne	.+10     	; 0x1216 <DIO_setPortDirection+0x66>
    120c:	81 b3       	in	r24, 0x11	; 17
    120e:	8f ef       	ldi	r24, 0xFF	; 255
    1210:	81 bb       	out	0x11, r24	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	08 95       	ret
			case DIO_PORTC:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRC_REG)):(CLR_REG(DDRC_REG));
			break;
			
			case DIO_PORTD:
			(DIO_PORT_OUTPUT == PortDirection)?(SET_REG(DDRD_REG)):(CLR_REG(DDRD_REG));
    1216:	81 b3       	in	r24, 0x11	; 17
    1218:	11 ba       	out	0x11, r1	; 17



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	08 95       	ret
			break;
		}
	} 
	else
	{
		ErrorStatus = DIO_NOK;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	08 95       	ret



DIO_ERRORSTATUS DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1222:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    1224:	08 95       	ret

00001226 <DIO_setPortValue>:


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) )
    1226:	84 30       	cpi	r24, 0x04	; 4
    1228:	a8 f4       	brcc	.+42     	; 0x1254 <DIO_setPortValue+0x2e>
	{
		switch(PortId)
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	51 f0       	breq	.+20     	; 0x1242 <DIO_setPortValue+0x1c>
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	28 f0       	brcs	.+10     	; 0x123c <DIO_setPortValue+0x16>
    1232:	82 30       	cpi	r24, 0x02	; 2
    1234:	49 f0       	breq	.+18     	; 0x1248 <DIO_setPortValue+0x22>
    1236:	83 30       	cpi	r24, 0x03	; 3
    1238:	79 f4       	brne	.+30     	; 0x1258 <DIO_setPortValue+0x32>
    123a:	09 c0       	rjmp	.+18     	; 0x124e <DIO_setPortValue+0x28>
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
    123c:	6b bb       	out	0x1b, r22	; 27
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    123e:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			PORTA_REG=PortValue;
			break;
    1240:	08 95       	ret
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
    1242:	68 bb       	out	0x18, r22	; 24
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1244:	80 e0       	ldi	r24, 0x00	; 0
			PORTA_REG=PortValue;
			break;
			
			case DIO_PORTB:
			PORTB_REG=PortValue;
			break;
    1246:	08 95       	ret
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
    1248:	65 bb       	out	0x15, r22	; 21
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    124a:	80 e0       	ldi	r24, 0x00	; 0
			PORTB_REG=PortValue;
			break;
			
			case DIO_PORTC:
			PORTC_REG=PortValue;
			break;
    124c:	08 95       	ret
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
    124e:	62 bb       	out	0x12, r22	; 18
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1250:	80 e0       	ldi	r24, 0x00	; 0
			PORTC_REG=PortValue;
			break;
			
			case DIO_PORTD:
			PORTD_REG=PortValue;
			break;
    1252:	08 95       	ret
		}
	}
	else
	{
	ErrorStatus = DIO_NOK;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	08 95       	ret
}


DIO_ERRORSTATUS DIO_setPortValue (u8 PortId, u8 PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1258:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
	ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    125a:	08 95       	ret

0000125c <DIO_getPortValue>:


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD) && (PortValue!=NULL) )
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	00 f5       	brcc	.+64     	; 0x12a0 <DIO_getPortValue+0x44>
    1260:	61 15       	cp	r22, r1
    1262:	71 05       	cpc	r23, r1
    1264:	f9 f0       	breq	.+62     	; 0x12a4 <DIO_getPortValue+0x48>
	{
		switch(PortId)
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	61 f0       	breq	.+24     	; 0x1282 <DIO_getPortValue+0x26>
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	28 f0       	brcs	.+10     	; 0x1278 <DIO_getPortValue+0x1c>
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	69 f0       	breq	.+26     	; 0x128c <DIO_getPortValue+0x30>
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	c9 f4       	brne	.+50     	; 0x12a8 <DIO_getPortValue+0x4c>
    1276:	0f c0       	rjmp	.+30     	; 0x1296 <DIO_getPortValue+0x3a>
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
    1278:	8b b3       	in	r24, 0x1b	; 27
    127a:	fb 01       	movw	r30, r22
    127c:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    127e:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			*PortValue =PORTA_REG;
			break;
    1280:	08 95       	ret
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
    1282:	88 b3       	in	r24, 0x18	; 24
    1284:	fb 01       	movw	r30, r22
    1286:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1288:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTA_REG;
			break;
			
			case DIO_PORTB:
		    *PortValue =PORTB_REG;
			break;
    128a:	08 95       	ret
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
    128c:	85 b3       	in	r24, 0x15	; 21
    128e:	fb 01       	movw	r30, r22
    1290:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1292:	80 e0       	ldi	r24, 0x00	; 0
		    *PortValue =PORTB_REG;
			break;
			
			case DIO_PORTC:
			*PortValue =PORTC_REG;
			break;
    1294:	08 95       	ret
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
    1296:	82 b3       	in	r24, 0x12	; 18
    1298:	fb 01       	movw	r30, r22
    129a:	80 83       	st	Z, r24
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    129c:	80 e0       	ldi	r24, 0x00	; 0
			*PortValue =PORTC_REG;
			break;
			
			case DIO_PORTD:
			*PortValue =PORTD_REG;
			break;
    129e:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	08 95       	ret
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	08 95       	ret
}


DIO_ERRORSTATUS DIO_getPortValue(u8 PortId, u8* PortValue)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    12a8:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    12aa:	08 95       	ret

000012ac <DIO_togglePortValue>:


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
    12ac:	84 30       	cpi	r24, 0x04	; 4
    12ae:	e8 f4       	brcc	.+58     	; 0x12ea <DIO_togglePortValue+0x3e>
	{
		switch(PortId)
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	61 f0       	breq	.+24     	; 0x12cc <DIO_togglePortValue+0x20>
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	28 f0       	brcs	.+10     	; 0x12c2 <DIO_togglePortValue+0x16>
    12b8:	82 30       	cpi	r24, 0x02	; 2
    12ba:	69 f0       	breq	.+26     	; 0x12d6 <DIO_togglePortValue+0x2a>
    12bc:	83 30       	cpi	r24, 0x03	; 3
    12be:	b9 f4       	brne	.+46     	; 0x12ee <DIO_togglePortValue+0x42>
    12c0:	0f c0       	rjmp	.+30     	; 0x12e0 <DIO_togglePortValue+0x34>
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
    12c2:	8b b3       	in	r24, 0x1b	; 27
    12c4:	80 95       	com	r24
    12c6:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    12c8:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			TGL_REG(PORTA_REG);
			break;
    12ca:	08 95       	ret
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
    12cc:	88 b3       	in	r24, 0x18	; 24
    12ce:	80 95       	com	r24
    12d0:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    12d2:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			TGL_REG(PORTB_REG);
			break;
    12d4:	08 95       	ret
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
    12d6:	85 b3       	in	r24, 0x15	; 21
    12d8:	80 95       	com	r24
    12da:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    12dc:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			TGL_REG(PORTC_REG);
			break;
    12de:	08 95       	ret
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
    12e0:	82 b3       	in	r24, 0x12	; 18
    12e2:	80 95       	com	r24
    12e4:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    12e6:	80 e0       	ldi	r24, 0x00	; 0
			TGL_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			TGL_REG(PORTD_REG);
			break;
    12e8:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	08 95       	ret
}


DIO_ERRORSTATUS DIO_togglePortValue (u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    12ee:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
}
    12f0:	08 95       	ret

000012f2 <DIO_activePortInPullUpResistance>:


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
	if ( (PortId<=DIO_PORTD))
    12f2:	84 30       	cpi	r24, 0x04	; 4
    12f4:	e8 f4       	brcc	.+58     	; 0x1330 <DIO_activePortInPullUpResistance+0x3e>
	{
		switch(PortId)
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	61 f0       	breq	.+24     	; 0x1312 <DIO_activePortInPullUpResistance+0x20>
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	28 f0       	brcs	.+10     	; 0x1308 <DIO_activePortInPullUpResistance+0x16>
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	69 f0       	breq	.+26     	; 0x131c <DIO_activePortInPullUpResistance+0x2a>
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	b9 f4       	brne	.+46     	; 0x1334 <DIO_activePortInPullUpResistance+0x42>
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <DIO_activePortInPullUpResistance+0x34>
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
    1308:	8b b3       	in	r24, 0x1b	; 27
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	8b bb       	out	0x1b, r24	; 27
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    130e:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PortId)
		{
			case DIO_PORTA:
			SET_REG(PORTA_REG);
			break;
    1310:	08 95       	ret
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
    1312:	88 b3       	in	r24, 0x18	; 24
    1314:	8f ef       	ldi	r24, 0xFF	; 255
    1316:	88 bb       	out	0x18, r24	; 24
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1318:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTA_REG);
			break;
			
			case DIO_PORTB:
			SET_REG(PORTB_REG);
			break;
    131a:	08 95       	ret
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
    131c:	85 b3       	in	r24, 0x15	; 21
    131e:	8f ef       	ldi	r24, 0xFF	; 255
    1320:	85 bb       	out	0x15, r24	; 21
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1322:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTB_REG);
			break;
			
			case DIO_PORTC:
			SET_REG(PORTC_REG);
			break;
    1324:	08 95       	ret
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
    1326:	82 b3       	in	r24, 0x12	; 18
    1328:	8f ef       	ldi	r24, 0xFF	; 255
    132a:	82 bb       	out	0x12, r24	; 18
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    132c:	80 e0       	ldi	r24, 0x00	; 0
			SET_REG(PORTC_REG);
			break;
			
			case DIO_PORTD:
			SET_REG(PORTD_REG);
			break;
    132e:	08 95       	ret
		}
	}
	else
	{
		ErrorStatus = DIO_NOK;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	08 95       	ret
}


DIO_ERRORSTATUS DIO_activePortInPullUpResistance(u8 PortId)
{
	DIO_ERRORSTATUS ErrorStatus = DIO_OK;
    1334:	80 e0       	ldi	r24, 0x00	; 0
	{
		ErrorStatus = DIO_NOK;
	}
	return ErrorStatus;
	
}
    1336:	08 95       	ret

00001338 <I2C_initMaster>:
#include "../includes/I2C_private.h"

void I2C_initMaster(void)
{
	/*	SCL 400KHZ	*/
	TWBR=0b00001100;       //12
    1338:	8c e0       	ldi	r24, 0x0C	; 12
    133a:	80 b9       	out	0x00, r24	; 0
	CLR_BIT(TWSR,TWPS0);
    133c:	08 98       	cbi	0x01, 0	; 1
	CLR_BIT(TWSR,TWPS1);
    133e:	09 98       	cbi	0x01, 1	; 1
	
	/*	Enable Acknowledge	*/
	SET_BIT(TWCR,TWEA);
    1340:	86 b7       	in	r24, 0x36	; 54
    1342:	80 64       	ori	r24, 0x40	; 64
    1344:	86 bf       	out	0x36, r24	; 54

	/*	Enable interrupt if work by call back	*/
	//SET_BIT(TWCR,TWIE);
	
	/*	Enable I2C	*/
	SET_BIT(TWCR,TWEN);
    1346:	86 b7       	in	r24, 0x36	; 54
    1348:	84 60       	ori	r24, 0x04	; 4
    134a:	86 bf       	out	0x36, r24	; 54
}
    134c:	08 95       	ret

0000134e <I2C_sendStartCondition>:

void I2C_sendStartCondition(void)
{
	/*	Enable Start Condition	*/
	SET_BIT(TWCR,TWSTA);
    134e:	86 b7       	in	r24, 0x36	; 54
    1350:	80 62       	ori	r24, 0x20	; 32
    1352:	86 bf       	out	0x36, r24	; 54
	
	/*	Clear Flag to request Start Condition */
	SET_BIT(TWCR,TWINT);
    1354:	86 b7       	in	r24, 0x36	; 54
    1356:	80 68       	ori	r24, 0x80	; 128
    1358:	86 bf       	out	0x36, r24	; 54
	
	/*Busy Wait The Flag	*/
	while(0 == GET_BIT(TWCR,TWINT));
    135a:	06 b6       	in	r0, 0x36	; 54
    135c:	07 fe       	sbrs	r0, 7
    135e:	fd cf       	rjmp	.-6      	; 0x135a <I2C_sendStartCondition+0xc>
	
	/*	Check StatsValue to make sure start Condition is true */
	while(I2C_StatsValue != I2C_StartCondotioanAck);       
    1360:	81 b1       	in	r24, 0x01	; 1
    1362:	88 7f       	andi	r24, 0xF8	; 248
    1364:	88 30       	cpi	r24, 0x08	; 8
    1366:	e1 f7       	brne	.-8      	; 0x1360 <I2C_sendStartCondition+0x12>
	 
}
    1368:	08 95       	ret

0000136a <I2C_sendRepStartCondition>:

void I2C_sendRepStartCondition(void)
{
	/*	Enable Start Condition	*/
	SET_BIT(TWCR,TWSTA);
    136a:	86 b7       	in	r24, 0x36	; 54
    136c:	80 62       	ori	r24, 0x20	; 32
    136e:	86 bf       	out	0x36, r24	; 54
	
	/*	Clear Flag to request Start Condition */
	SET_BIT(TWCR,TWINT);
    1370:	86 b7       	in	r24, 0x36	; 54
    1372:	80 68       	ori	r24, 0x80	; 128
    1374:	86 bf       	out	0x36, r24	; 54
	
	/*Busy Wait The Flag	*/
	while(0 == GET_BIT(TWCR,TWINT));
    1376:	06 b6       	in	r0, 0x36	; 54
    1378:	07 fe       	sbrs	r0, 7
    137a:	fd cf       	rjmp	.-6      	; 0x1376 <I2C_sendRepStartCondition+0xc>
	
	/*	Check StatsValue to make sure Repeated start Condition is true */
	while(I2C_StatsValue != I2C_RepeatedStartCondotioanAck);       
    137c:	81 b1       	in	r24, 0x01	; 1
    137e:	88 7f       	andi	r24, 0xF8	; 248
    1380:	80 31       	cpi	r24, 0x10	; 16
    1382:	e1 f7       	brne	.-8      	; 0x137c <I2C_sendRepStartCondition+0x12>
}
    1384:	08 95       	ret

00001386 <I2C_sendStopCondition>:

void I2C_sendStopCondition(void)
{
	/*	Enable Stop Condition	*/
	SET_BIT(TWCR,TWSTO);
    1386:	86 b7       	in	r24, 0x36	; 54
    1388:	80 61       	ori	r24, 0x10	; 16
    138a:	86 bf       	out	0x36, r24	; 54
	
	/*	Clear Flag to request Start Condition */
	SET_BIT(TWCR,TWINT);
    138c:	86 b7       	in	r24, 0x36	; 54
    138e:	80 68       	ori	r24, 0x80	; 128
    1390:	86 bf       	out	0x36, r24	; 54
}
    1392:	08 95       	ret

00001394 <I2C_sendSlaveAddWithWrite>:

void I2C_sendSlaveAddWithWrite(u8 slaveAdd)
{
	/*	Validation Address	*/
	if(slaveAdd<128)
    1394:	88 23       	and	r24, r24
    1396:	84 f0       	brlt	.+32     	; 0x13b8 <I2C_sendSlaveAddWithWrite+0x24>
	{
		TWDR=slaveAdd<<1;
    1398:	88 0f       	add	r24, r24
    139a:	83 b9       	out	0x03, r24	; 3
		
		/*	Select Write Operation	*/
		CLR_BIT(TWDR,TWD0);
    139c:	18 98       	cbi	0x03, 0	; 3
		
		/*	Clear Start Condition	*/
		CLR_BIT(TWCR,TWSTA);
    139e:	86 b7       	in	r24, 0x36	; 54
    13a0:	8f 7d       	andi	r24, 0xDF	; 223
    13a2:	86 bf       	out	0x36, r24	; 54
		
		/*	Clear Flag to  Send Address To Bus	 */
		SET_BIT(TWCR,TWINT);
    13a4:	86 b7       	in	r24, 0x36	; 54
    13a6:	80 68       	ori	r24, 0x80	; 128
    13a8:	86 bf       	out	0x36, r24	; 54
		
		/*Busy Wait The Flag	*/
		while(0 == GET_BIT(TWCR,TWINT));
    13aa:	06 b6       	in	r0, 0x36	; 54
    13ac:	07 fe       	sbrs	r0, 7
    13ae:	fd cf       	rjmp	.-6      	; 0x13aa <I2C_sendSlaveAddWithWrite+0x16>
		
		/*	Check Slave Address  */
		while(I2C_StatsValue != I2C_SlaveAddressWrireAck);
    13b0:	81 b1       	in	r24, 0x01	; 1
    13b2:	88 7f       	andi	r24, 0xF8	; 248
    13b4:	88 31       	cpi	r24, 0x18	; 24
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <I2C_sendSlaveAddWithWrite+0x1c>
    13b8:	08 95       	ret

000013ba <I2C_sendSlaveAddWithRead>:
}

void I2C_sendSlaveAddWithRead(u8 slaveAdd)
{
	/*	Validation Address	*/
	if(slaveAdd<128)
    13ba:	88 23       	and	r24, r24
    13bc:	84 f0       	brlt	.+32     	; 0x13de <I2C_sendSlaveAddWithRead+0x24>
	{
		TWDR=slaveAdd<<1;
    13be:	88 0f       	add	r24, r24
    13c0:	83 b9       	out	0x03, r24	; 3
		
		/*	Select Read Operation	*/
		SET_BIT(TWDR,TWD0);
    13c2:	18 9a       	sbi	0x03, 0	; 3
		
		/*	Clear Start Condition	*/
		CLR_BIT(TWCR,TWSTA);
    13c4:	86 b7       	in	r24, 0x36	; 54
    13c6:	8f 7d       	andi	r24, 0xDF	; 223
    13c8:	86 bf       	out	0x36, r24	; 54
		
		/*	Clear Flag to  Send Address To Bus	 */
		SET_BIT(TWCR,TWINT);
    13ca:	86 b7       	in	r24, 0x36	; 54
    13cc:	80 68       	ori	r24, 0x80	; 128
    13ce:	86 bf       	out	0x36, r24	; 54
		
		/*Busy Wait The Flag	*/
		while(0 == GET_BIT(TWCR,TWINT));
    13d0:	06 b6       	in	r0, 0x36	; 54
    13d2:	07 fe       	sbrs	r0, 7
    13d4:	fd cf       	rjmp	.-6      	; 0x13d0 <I2C_sendSlaveAddWithRead+0x16>
		
		/*	Check Slave Address  */
		while(I2C_StatsValue != I2C_SlaveAddressReadAck);
    13d6:	81 b1       	in	r24, 0x01	; 1
    13d8:	88 7f       	andi	r24, 0xF8	; 248
    13da:	80 34       	cpi	r24, 0x40	; 64
    13dc:	e1 f7       	brne	.-8      	; 0x13d6 <I2C_sendSlaveAddWithRead+0x1c>
    13de:	08 95       	ret

000013e0 <I2C_sendMasterDataByte>:
}

void I2C_sendMasterDataByte(u8 TxData)
{
	/*	Send Data To Data Register	*/
	TWDR=TxData;
    13e0:	83 b9       	out	0x03, r24	; 3
	
	/*	Clear Flag to  Send Address To Bus	 */
	SET_BIT(TWCR,TWINT);
    13e2:	86 b7       	in	r24, 0x36	; 54
    13e4:	80 68       	ori	r24, 0x80	; 128
    13e6:	86 bf       	out	0x36, r24	; 54
	
	/*Busy Wait The Flag	*/
	while(0 == GET_BIT(TWCR,TWINT));
    13e8:	06 b6       	in	r0, 0x36	; 54
    13ea:	07 fe       	sbrs	r0, 7
    13ec:	fd cf       	rjmp	.-6      	; 0x13e8 <I2C_sendMasterDataByte+0x8>
	
	/*	Check Master Data Send   */
	while(I2C_StatsValue != I2C_MasterSendDataAck);
    13ee:	81 b1       	in	r24, 0x01	; 1
    13f0:	88 7f       	andi	r24, 0xF8	; 248
    13f2:	88 32       	cpi	r24, 0x28	; 40
    13f4:	e1 f7       	brne	.-8      	; 0x13ee <I2C_sendMasterDataByte+0xe>
	
}
    13f6:	08 95       	ret

000013f8 <I2C_recieveMasterDataByte>:

void I2C_recieveMasterDataByte(u8* RxData)
{
	if(RxData!=NULL)
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	69 f0       	breq	.+26     	; 0x1416 <I2C_recieveMasterDataByte+0x1e>
	{
		/*	Clear Flag to  Send Address To Bus	 */
		SET_BIT(TWCR,TWINT);
    13fc:	26 b7       	in	r18, 0x36	; 54
    13fe:	20 68       	ori	r18, 0x80	; 128
    1400:	26 bf       	out	0x36, r18	; 54
		
		/*	Busy Wait The Flag	*/
		while(0 == GET_BIT(TWCR,TWINT));
    1402:	06 b6       	in	r0, 0x36	; 54
    1404:	07 fe       	sbrs	r0, 7
    1406:	fd cf       	rjmp	.-6      	; 0x1402 <I2C_recieveMasterDataByte+0xa>
		
		/*	Check Master Data Receive  */
		while(I2C_StatsValue != I2C_MasterReceiveDataAck);
    1408:	21 b1       	in	r18, 0x01	; 1
    140a:	28 7f       	andi	r18, 0xF8	; 248
    140c:	20 35       	cpi	r18, 0x50	; 80
    140e:	e1 f7       	brne	.-8      	; 0x1408 <I2C_recieveMasterDataByte+0x10>
		
		/*	Receive Data From Data Register	*/
		*RxData=TWDR;
    1410:	23 b1       	in	r18, 0x03	; 3
    1412:	fc 01       	movw	r30, r24
    1414:	20 83       	st	Z, r18
    1416:	08 95       	ret

00001418 <TMR1_init>:


void TMR1_init(void)
{
	/*Select Mode : mode 14  */
	CLR_BIT(TCCR1A,WGM10);
    1418:	8f b5       	in	r24, 0x2f	; 47
    141a:	8e 7f       	andi	r24, 0xFE	; 254
    141c:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,WGM11);
    141e:	8f b5       	in	r24, 0x2f	; 47
    1420:	82 60       	ori	r24, 0x02	; 2
    1422:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,WGM12);
    1424:	8e b5       	in	r24, 0x2e	; 46
    1426:	88 60       	ori	r24, 0x08	; 8
    1428:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,WGM13);
    142a:	8e b5       	in	r24, 0x2e	; 46
    142c:	80 61       	ori	r24, 0x10	; 16
    142e:	8e bd       	out	0x2e, r24	; 46
	
	CLR_BIT(TCCR1A,COM1A0);
    1430:	8f b5       	in	r24, 0x2f	; 47
    1432:	8f 7b       	andi	r24, 0xBF	; 191
    1434:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,COM1A1);
    1436:	8f b5       	in	r24, 0x2f	; 47
    1438:	80 68       	ori	r24, 0x80	; 128
    143a:	8f bd       	out	0x2f, r24	; 47
	
	CLR_BIT(TCCR1A,COM1B0);
    143c:	8f b5       	in	r24, 0x2f	; 47
    143e:	8f 7e       	andi	r24, 0xEF	; 239
    1440:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,COM1B1);
    1442:	8f b5       	in	r24, 0x2f	; 47
    1444:	80 62       	ori	r24, 0x20	; 32
    1446:	8f bd       	out	0x2f, r24	; 47
}
    1448:	08 95       	ret

0000144a <TMR1_Start>:

void TMR1_Start(void)
{
	/*select prescaler : 64*/
	
	SET_BIT(TCCR1B,CS10);
    144a:	8e b5       	in	r24, 0x2e	; 46
    144c:	81 60       	ori	r24, 0x01	; 1
    144e:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS11);
    1450:	8e b5       	in	r24, 0x2e	; 46
    1452:	82 60       	ori	r24, 0x02	; 2
    1454:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS12);
    1456:	8e b5       	in	r24, 0x2e	; 46
    1458:	8b 7f       	andi	r24, 0xFB	; 251
    145a:	8e bd       	out	0x2e, r24	; 46
}
    145c:	08 95       	ret

0000145e <TMR1_Stop>:


void TMR1_Stop(void)
{
	CLR_BIT(TCCR1B,CS10);
    145e:	8e b5       	in	r24, 0x2e	; 46
    1460:	8e 7f       	andi	r24, 0xFE	; 254
    1462:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS11);
    1464:	8e b5       	in	r24, 0x2e	; 46
    1466:	8d 7f       	andi	r24, 0xFD	; 253
    1468:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS12);
    146a:	8e b5       	in	r24, 0x2e	; 46
    146c:	8b 7f       	andi	r24, 0xFB	; 251
    146e:	8e bd       	out	0x2e, r24	; 46
}
    1470:	08 95       	ret

00001472 <TMR1_SetDutyCycle_And_Freq_Value>:


void TMR1_SetDutyCycle_And_Freq_Value(u16 Freq ,f32 Duty)
{	
    1472:	cf 92       	push	r12
    1474:	df 92       	push	r13
    1476:	ef 92       	push	r14
    1478:	ff 92       	push	r15
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	ec 01       	movw	r28, r24
    1480:	6a 01       	movw	r12, r20
    1482:	7b 01       	movw	r14, r22
// 	OCR1BL=Duty;  
	if(Duty<=100)
    1484:	cb 01       	movw	r24, r22
    1486:	ba 01       	movw	r22, r20
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	48 ec       	ldi	r20, 0xC8	; 200
    148e:	52 e4       	ldi	r21, 0x42	; 66
    1490:	0e 94 9d 0b 	call	0x173a	; 0x173a <__cmpsf2>
    1494:	18 16       	cp	r1, r24
    1496:	5c f1       	brlt	.+86     	; 0x14ee <TMR1_SetDutyCycle_And_Freq_Value+0x7c>
	{
		ICR1L =((1000000UL/Freq)/4)-1;
    1498:	9e 01       	movw	r18, r28
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	60 e9       	ldi	r22, 0x90	; 144
    14a0:	70 ed       	ldi	r23, 0xD0	; 208
    14a2:	83 e0       	ldi	r24, 0x03	; 3
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <__udivmodsi4>
    14aa:	21 50       	subi	r18, 0x01	; 1
    14ac:	30 40       	sbci	r19, 0x00	; 0
    14ae:	37 bd       	out	0x27, r19	; 39
    14b0:	26 bd       	out	0x26, r18	; 38
		OCR1AL=((Duty*(ICR1L+1))/100.0)-1;
    14b2:	66 b5       	in	r22, 0x26	; 38
    14b4:	77 b5       	in	r23, 0x27	; 39
    14b6:	6f 5f       	subi	r22, 0xFF	; 255
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 35 0c 	call	0x186a	; 0x186a <__floatunsisf>
    14c2:	a7 01       	movw	r20, r14
    14c4:	96 01       	movw	r18, r12
    14c6:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <__mulsf3>
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	48 ec       	ldi	r20, 0xC8	; 200
    14d0:	52 e4       	ldi	r21, 0x42	; 66
    14d2:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__divsf3>
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e8       	ldi	r20, 0x80	; 128
    14dc:	5f e3       	ldi	r21, 0x3F	; 63
    14de:	0e 94 38 0b 	call	0x1670	; 0x1670 <__subsf3>
    14e2:	0e 94 09 0c 	call	0x1812	; 0x1812 <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	9b bd       	out	0x2b, r25	; 43
    14ec:	8a bd       	out	0x2a, r24	; 42
	}		 
}
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	ff 90       	pop	r15
    14f4:	ef 90       	pop	r14
    14f6:	df 90       	pop	r13
    14f8:	cf 90       	pop	r12
    14fa:	08 95       	ret

000014fc <UART_init>:

#define UART_UBBR_VALUE (((F_CPU)/(UART_SelectedBoudRate*16UL))-1)

void UART_init (void)
{
	CLR_BIT(UCSRB,UCSZ2);
    14fc:	52 98       	cbi	0x0a, 2	; 10
	CLR_BIT(UCSRC_Value,UPM0);
	CLR_BIT(UCSRC_Value,UPM1);
	CLR_BIT(UCSRC_Value,UMSEL);
	SET_BIT(UCSRC_Value,URSEL);
	
	UCSRC=UCSRC_Value;      // Set UART Mode: 8-bit data, 1 stop bit, no parity (0x86)
    14fe:	86 e8       	ldi	r24, 0x86	; 134
    1500:	80 bd       	out	0x20, r24	; 32
	
	UBRRL=UART_UBBR_VALUE;     // Set baud rate = 9600 -> 103;
    1502:	87 e6       	ldi	r24, 0x67	; 103
    1504:	89 b9       	out	0x09, r24	; 9
    UBRRH = (UART_UBBR_VALUE >> 8);
    1506:	10 bc       	out	0x20, r1	; 32
	
	CLR_BIT(UCSRA,U2X);   // Stop double speed
    1508:	59 98       	cbi	0x0b, 1	; 11
	
	
	SET_BIT(UCSRB,RXCIE);  // Enable Rx Interrupt 
    150a:	57 9a       	sbi	0x0a, 7	; 10
	SET_BIT(UCSRB,TXCIE);  // Enable Tx Interrupt 
    150c:	56 9a       	sbi	0x0a, 6	; 10
	SET_BIT(UCSRB,UDRIE);  // Enable UDR Interrupt 
    150e:	55 9a       	sbi	0x0a, 5	; 10
	
	SET_BIT(UCSRB,TXEN);  // Enable Tx
    1510:	53 9a       	sbi	0x0a, 3	; 10
	SET_BIT(UCSRB,RXEN);  // Enable Rx
    1512:	54 9a       	sbi	0x0a, 4	; 10
}
    1514:	08 95       	ret

00001516 <UART_ReceiveChar>:

void UART_ReceiveChar (u8* ReceiveData)
{
	if(ReceiveData!=NULL)
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	29 f0       	breq	.+10     	; 0x1524 <UART_ReceiveChar+0xe>
	{
		while(0 == GET_BIT(UCSRA,RXC));
    151a:	5f 9b       	sbis	0x0b, 7	; 11
    151c:	fe cf       	rjmp	.-4      	; 0x151a <UART_ReceiveChar+0x4>
		*ReceiveData=UDR;
    151e:	2c b1       	in	r18, 0x0c	; 12
    1520:	fc 01       	movw	r30, r24
    1522:	20 83       	st	Z, r18
    1524:	08 95       	ret

00001526 <UART_TransmiteChar>:



void UART_TransmiteChar(u8 TransmiteData)
{
	UDR=TransmiteData;
    1526:	8c b9       	out	0x0c, r24	; 12
	while(0 == GET_BIT(UCSRA,UDRE));
    1528:	8b b1       	in	r24, 0x0b	; 11
    152a:	85 ff       	sbrs	r24, 5
    152c:	fd cf       	rjmp	.-6      	; 0x1528 <UART_TransmiteChar+0x2>
}
    152e:	08 95       	ret

00001530 <UART_TransmiteString>:

void UART_TransmiteString(u8 *TransmiteData)
{
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	8c 01       	movw	r16, r24
	u8 Index=0;

	while (TransmiteData[Index]!='\0')		/* Send string till null */
    1538:	fc 01       	movw	r30, r24
    153a:	80 81       	ld	r24, Z
    153c:	88 23       	and	r24, r24
    153e:	51 f0       	breq	.+20     	; 0x1554 <UART_TransmiteString+0x24>
	while(0 == GET_BIT(UCSRA,UDRE));
}

void UART_TransmiteString(u8 *TransmiteData)
{
	u8 Index=0;
    1540:	c0 e0       	ldi	r28, 0x00	; 0

	while (TransmiteData[Index]!='\0')		/* Send string till null */
	{
		UART_TransmiteChar(TransmiteData[Index]);
    1542:	0e 94 93 0a 	call	0x1526	; 0x1526 <UART_TransmiteChar>
		Index++;
    1546:	cf 5f       	subi	r28, 0xFF	; 255

void UART_TransmiteString(u8 *TransmiteData)
{
	u8 Index=0;

	while (TransmiteData[Index]!='\0')		/* Send string till null */
    1548:	f8 01       	movw	r30, r16
    154a:	ec 0f       	add	r30, r28
    154c:	f1 1d       	adc	r31, r1
    154e:	80 81       	ld	r24, Z
    1550:	88 23       	and	r24, r24
    1552:	b9 f7       	brne	.-18     	; 0x1542 <UART_TransmiteString+0x12>
	{
		UART_TransmiteChar(TransmiteData[Index]);
		Index++;
	}
}
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	08 95       	ret

0000155c <UART_CallBack_RXC>:

void UART_CallBack_RXC (void(*PtrFunction)(void))
{
	Private_UART_CallBack_RXC=PtrFunction;
    155c:	90 93 d9 00 	sts	0x00D9, r25
    1560:	80 93 d8 00 	sts	0x00D8, r24
}
    1564:	08 95       	ret

00001566 <UART_CallBack_UDRE>:

void UART_CallBack_UDRE(void(*PtrFunction)(void))
{
	Private_UART_CallBack_UDRE=PtrFunction;
    1566:	90 93 db 00 	sts	0x00DB, r25
    156a:	80 93 da 00 	sts	0x00DA, r24
}
    156e:	08 95       	ret

00001570 <UART_CallBack_TXC>:

void UART_CallBack_TXC(void(*PtrFunction)(void))
{
	Private_UART_CallBack_TXC=PtrFunction;
    1570:	90 93 dd 00 	sts	0x00DD, r25
    1574:	80 93 dc 00 	sts	0x00DC, r24
}
    1578:	08 95       	ret

0000157a <__vector_13>:


// Receive Complete Interrupt Request
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
    157a:	1f 92       	push	r1
    157c:	0f 92       	push	r0
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	0f 92       	push	r0
    1582:	11 24       	eor	r1, r1
    1584:	2f 93       	push	r18
    1586:	3f 93       	push	r19
    1588:	4f 93       	push	r20
    158a:	5f 93       	push	r21
    158c:	6f 93       	push	r22
    158e:	7f 93       	push	r23
    1590:	8f 93       	push	r24
    1592:	9f 93       	push	r25
    1594:	af 93       	push	r26
    1596:	bf 93       	push	r27
    1598:	ef 93       	push	r30
    159a:	ff 93       	push	r31
	if (Private_UART_CallBack_RXC!=NULL)
    159c:	e0 91 d8 00 	lds	r30, 0x00D8
    15a0:	f0 91 d9 00 	lds	r31, 0x00D9
    15a4:	30 97       	sbiw	r30, 0x00	; 0
    15a6:	09 f0       	breq	.+2      	; 0x15aa <__vector_13+0x30>
	{
		Private_UART_CallBack_RXC();
    15a8:	09 95       	icall
	}
}
    15aa:	ff 91       	pop	r31
    15ac:	ef 91       	pop	r30
    15ae:	bf 91       	pop	r27
    15b0:	af 91       	pop	r26
    15b2:	9f 91       	pop	r25
    15b4:	8f 91       	pop	r24
    15b6:	7f 91       	pop	r23
    15b8:	6f 91       	pop	r22
    15ba:	5f 91       	pop	r21
    15bc:	4f 91       	pop	r20
    15be:	3f 91       	pop	r19
    15c0:	2f 91       	pop	r18
    15c2:	0f 90       	pop	r0
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	0f 90       	pop	r0
    15c8:	1f 90       	pop	r1
    15ca:	18 95       	reti

000015cc <__vector_14>:

// Data Register Empty Interrupt Request
void __vector_14(void) __attribute__((signal));
void __vector_14()
{
    15cc:	1f 92       	push	r1
    15ce:	0f 92       	push	r0
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	0f 92       	push	r0
    15d4:	11 24       	eor	r1, r1
    15d6:	2f 93       	push	r18
    15d8:	3f 93       	push	r19
    15da:	4f 93       	push	r20
    15dc:	5f 93       	push	r21
    15de:	6f 93       	push	r22
    15e0:	7f 93       	push	r23
    15e2:	8f 93       	push	r24
    15e4:	9f 93       	push	r25
    15e6:	af 93       	push	r26
    15e8:	bf 93       	push	r27
    15ea:	ef 93       	push	r30
    15ec:	ff 93       	push	r31
	if (Private_UART_CallBack_UDRE!=NULL)
    15ee:	e0 91 da 00 	lds	r30, 0x00DA
    15f2:	f0 91 db 00 	lds	r31, 0x00DB
    15f6:	30 97       	sbiw	r30, 0x00	; 0
    15f8:	09 f0       	breq	.+2      	; 0x15fc <__vector_14+0x30>
	{
		Private_UART_CallBack_UDRE();
    15fa:	09 95       	icall
	} 
}
    15fc:	ff 91       	pop	r31
    15fe:	ef 91       	pop	r30
    1600:	bf 91       	pop	r27
    1602:	af 91       	pop	r26
    1604:	9f 91       	pop	r25
    1606:	8f 91       	pop	r24
    1608:	7f 91       	pop	r23
    160a:	6f 91       	pop	r22
    160c:	5f 91       	pop	r21
    160e:	4f 91       	pop	r20
    1610:	3f 91       	pop	r19
    1612:	2f 91       	pop	r18
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <__vector_15>:

// Transmit Complete Interrupt Request
void __vector_15(void) __attribute__((signal));
void __vector_15()
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
	if (Private_UART_CallBack_TXC!=NULL)
    1640:	e0 91 dc 00 	lds	r30, 0x00DC
    1644:	f0 91 dd 00 	lds	r31, 0x00DD
    1648:	30 97       	sbiw	r30, 0x00	; 0
    164a:	09 f0       	breq	.+2      	; 0x164e <__vector_15+0x30>
	{
		Private_UART_CallBack_TXC();
    164c:	09 95       	icall
	} 
    164e:	ff 91       	pop	r31
    1650:	ef 91       	pop	r30
    1652:	bf 91       	pop	r27
    1654:	af 91       	pop	r26
    1656:	9f 91       	pop	r25
    1658:	8f 91       	pop	r24
    165a:	7f 91       	pop	r23
    165c:	6f 91       	pop	r22
    165e:	5f 91       	pop	r21
    1660:	4f 91       	pop	r20
    1662:	3f 91       	pop	r19
    1664:	2f 91       	pop	r18
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	0f 90       	pop	r0
    166c:	1f 90       	pop	r1
    166e:	18 95       	reti

00001670 <__subsf3>:
    1670:	50 58       	subi	r21, 0x80	; 128

00001672 <__addsf3>:
    1672:	bb 27       	eor	r27, r27
    1674:	aa 27       	eor	r26, r26
    1676:	0e d0       	rcall	.+28     	; 0x1694 <__addsf3x>
    1678:	70 c1       	rjmp	.+736    	; 0x195a <__fp_round>
    167a:	61 d1       	rcall	.+706    	; 0x193e <__fp_pscA>
    167c:	30 f0       	brcs	.+12     	; 0x168a <__addsf3+0x18>
    167e:	66 d1       	rcall	.+716    	; 0x194c <__fp_pscB>
    1680:	20 f0       	brcs	.+8      	; 0x168a <__addsf3+0x18>
    1682:	31 f4       	brne	.+12     	; 0x1690 <__addsf3+0x1e>
    1684:	9f 3f       	cpi	r25, 0xFF	; 255
    1686:	11 f4       	brne	.+4      	; 0x168c <__addsf3+0x1a>
    1688:	1e f4       	brtc	.+6      	; 0x1690 <__addsf3+0x1e>
    168a:	56 c1       	rjmp	.+684    	; 0x1938 <__fp_nan>
    168c:	0e f4       	brtc	.+2      	; 0x1690 <__addsf3+0x1e>
    168e:	e0 95       	com	r30
    1690:	e7 fb       	bst	r30, 7
    1692:	4c c1       	rjmp	.+664    	; 0x192c <__fp_inf>

00001694 <__addsf3x>:
    1694:	e9 2f       	mov	r30, r25
    1696:	72 d1       	rcall	.+740    	; 0x197c <__fp_split3>
    1698:	80 f3       	brcs	.-32     	; 0x167a <__addsf3+0x8>
    169a:	ba 17       	cp	r27, r26
    169c:	62 07       	cpc	r22, r18
    169e:	73 07       	cpc	r23, r19
    16a0:	84 07       	cpc	r24, r20
    16a2:	95 07       	cpc	r25, r21
    16a4:	18 f0       	brcs	.+6      	; 0x16ac <__addsf3x+0x18>
    16a6:	71 f4       	brne	.+28     	; 0x16c4 <__addsf3x+0x30>
    16a8:	9e f5       	brtc	.+102    	; 0x1710 <__addsf3x+0x7c>
    16aa:	8a c1       	rjmp	.+788    	; 0x19c0 <__fp_zero>
    16ac:	0e f4       	brtc	.+2      	; 0x16b0 <__addsf3x+0x1c>
    16ae:	e0 95       	com	r30
    16b0:	0b 2e       	mov	r0, r27
    16b2:	ba 2f       	mov	r27, r26
    16b4:	a0 2d       	mov	r26, r0
    16b6:	0b 01       	movw	r0, r22
    16b8:	b9 01       	movw	r22, r18
    16ba:	90 01       	movw	r18, r0
    16bc:	0c 01       	movw	r0, r24
    16be:	ca 01       	movw	r24, r20
    16c0:	a0 01       	movw	r20, r0
    16c2:	11 24       	eor	r1, r1
    16c4:	ff 27       	eor	r31, r31
    16c6:	59 1b       	sub	r21, r25
    16c8:	99 f0       	breq	.+38     	; 0x16f0 <__addsf3x+0x5c>
    16ca:	59 3f       	cpi	r21, 0xF9	; 249
    16cc:	50 f4       	brcc	.+20     	; 0x16e2 <__addsf3x+0x4e>
    16ce:	50 3e       	cpi	r21, 0xE0	; 224
    16d0:	68 f1       	brcs	.+90     	; 0x172c <__addsf3x+0x98>
    16d2:	1a 16       	cp	r1, r26
    16d4:	f0 40       	sbci	r31, 0x00	; 0
    16d6:	a2 2f       	mov	r26, r18
    16d8:	23 2f       	mov	r18, r19
    16da:	34 2f       	mov	r19, r20
    16dc:	44 27       	eor	r20, r20
    16de:	58 5f       	subi	r21, 0xF8	; 248
    16e0:	f3 cf       	rjmp	.-26     	; 0x16c8 <__addsf3x+0x34>
    16e2:	46 95       	lsr	r20
    16e4:	37 95       	ror	r19
    16e6:	27 95       	ror	r18
    16e8:	a7 95       	ror	r26
    16ea:	f0 40       	sbci	r31, 0x00	; 0
    16ec:	53 95       	inc	r21
    16ee:	c9 f7       	brne	.-14     	; 0x16e2 <__addsf3x+0x4e>
    16f0:	7e f4       	brtc	.+30     	; 0x1710 <__addsf3x+0x7c>
    16f2:	1f 16       	cp	r1, r31
    16f4:	ba 0b       	sbc	r27, r26
    16f6:	62 0b       	sbc	r22, r18
    16f8:	73 0b       	sbc	r23, r19
    16fa:	84 0b       	sbc	r24, r20
    16fc:	ba f0       	brmi	.+46     	; 0x172c <__addsf3x+0x98>
    16fe:	91 50       	subi	r25, 0x01	; 1
    1700:	a1 f0       	breq	.+40     	; 0x172a <__addsf3x+0x96>
    1702:	ff 0f       	add	r31, r31
    1704:	bb 1f       	adc	r27, r27
    1706:	66 1f       	adc	r22, r22
    1708:	77 1f       	adc	r23, r23
    170a:	88 1f       	adc	r24, r24
    170c:	c2 f7       	brpl	.-16     	; 0x16fe <__addsf3x+0x6a>
    170e:	0e c0       	rjmp	.+28     	; 0x172c <__addsf3x+0x98>
    1710:	ba 0f       	add	r27, r26
    1712:	62 1f       	adc	r22, r18
    1714:	73 1f       	adc	r23, r19
    1716:	84 1f       	adc	r24, r20
    1718:	48 f4       	brcc	.+18     	; 0x172c <__addsf3x+0x98>
    171a:	87 95       	ror	r24
    171c:	77 95       	ror	r23
    171e:	67 95       	ror	r22
    1720:	b7 95       	ror	r27
    1722:	f7 95       	ror	r31
    1724:	9e 3f       	cpi	r25, 0xFE	; 254
    1726:	08 f0       	brcs	.+2      	; 0x172a <__addsf3x+0x96>
    1728:	b3 cf       	rjmp	.-154    	; 0x1690 <__addsf3+0x1e>
    172a:	93 95       	inc	r25
    172c:	88 0f       	add	r24, r24
    172e:	08 f0       	brcs	.+2      	; 0x1732 <__addsf3x+0x9e>
    1730:	99 27       	eor	r25, r25
    1732:	ee 0f       	add	r30, r30
    1734:	97 95       	ror	r25
    1736:	87 95       	ror	r24
    1738:	08 95       	ret

0000173a <__cmpsf2>:
    173a:	d4 d0       	rcall	.+424    	; 0x18e4 <__fp_cmp>
    173c:	08 f4       	brcc	.+2      	; 0x1740 <__cmpsf2+0x6>
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	08 95       	ret

00001742 <__divsf3>:
    1742:	0c d0       	rcall	.+24     	; 0x175c <__divsf3x>
    1744:	0a c1       	rjmp	.+532    	; 0x195a <__fp_round>
    1746:	02 d1       	rcall	.+516    	; 0x194c <__fp_pscB>
    1748:	40 f0       	brcs	.+16     	; 0x175a <__divsf3+0x18>
    174a:	f9 d0       	rcall	.+498    	; 0x193e <__fp_pscA>
    174c:	30 f0       	brcs	.+12     	; 0x175a <__divsf3+0x18>
    174e:	21 f4       	brne	.+8      	; 0x1758 <__divsf3+0x16>
    1750:	5f 3f       	cpi	r21, 0xFF	; 255
    1752:	19 f0       	breq	.+6      	; 0x175a <__divsf3+0x18>
    1754:	eb c0       	rjmp	.+470    	; 0x192c <__fp_inf>
    1756:	51 11       	cpse	r21, r1
    1758:	34 c1       	rjmp	.+616    	; 0x19c2 <__fp_szero>
    175a:	ee c0       	rjmp	.+476    	; 0x1938 <__fp_nan>

0000175c <__divsf3x>:
    175c:	0f d1       	rcall	.+542    	; 0x197c <__fp_split3>
    175e:	98 f3       	brcs	.-26     	; 0x1746 <__divsf3+0x4>

00001760 <__divsf3_pse>:
    1760:	99 23       	and	r25, r25
    1762:	c9 f3       	breq	.-14     	; 0x1756 <__divsf3+0x14>
    1764:	55 23       	and	r21, r21
    1766:	b1 f3       	breq	.-20     	; 0x1754 <__divsf3+0x12>
    1768:	95 1b       	sub	r25, r21
    176a:	55 0b       	sbc	r21, r21
    176c:	bb 27       	eor	r27, r27
    176e:	aa 27       	eor	r26, r26
    1770:	62 17       	cp	r22, r18
    1772:	73 07       	cpc	r23, r19
    1774:	84 07       	cpc	r24, r20
    1776:	38 f0       	brcs	.+14     	; 0x1786 <__divsf3_pse+0x26>
    1778:	9f 5f       	subi	r25, 0xFF	; 255
    177a:	5f 4f       	sbci	r21, 0xFF	; 255
    177c:	22 0f       	add	r18, r18
    177e:	33 1f       	adc	r19, r19
    1780:	44 1f       	adc	r20, r20
    1782:	aa 1f       	adc	r26, r26
    1784:	a9 f3       	breq	.-22     	; 0x1770 <__divsf3_pse+0x10>
    1786:	33 d0       	rcall	.+102    	; 0x17ee <__divsf3_pse+0x8e>
    1788:	0e 2e       	mov	r0, r30
    178a:	3a f0       	brmi	.+14     	; 0x179a <__divsf3_pse+0x3a>
    178c:	e0 e8       	ldi	r30, 0x80	; 128
    178e:	30 d0       	rcall	.+96     	; 0x17f0 <__divsf3_pse+0x90>
    1790:	91 50       	subi	r25, 0x01	; 1
    1792:	50 40       	sbci	r21, 0x00	; 0
    1794:	e6 95       	lsr	r30
    1796:	00 1c       	adc	r0, r0
    1798:	ca f7       	brpl	.-14     	; 0x178c <__divsf3_pse+0x2c>
    179a:	29 d0       	rcall	.+82     	; 0x17ee <__divsf3_pse+0x8e>
    179c:	fe 2f       	mov	r31, r30
    179e:	27 d0       	rcall	.+78     	; 0x17ee <__divsf3_pse+0x8e>
    17a0:	66 0f       	add	r22, r22
    17a2:	77 1f       	adc	r23, r23
    17a4:	88 1f       	adc	r24, r24
    17a6:	bb 1f       	adc	r27, r27
    17a8:	26 17       	cp	r18, r22
    17aa:	37 07       	cpc	r19, r23
    17ac:	48 07       	cpc	r20, r24
    17ae:	ab 07       	cpc	r26, r27
    17b0:	b0 e8       	ldi	r27, 0x80	; 128
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <__divsf3_pse+0x56>
    17b4:	bb 0b       	sbc	r27, r27
    17b6:	80 2d       	mov	r24, r0
    17b8:	bf 01       	movw	r22, r30
    17ba:	ff 27       	eor	r31, r31
    17bc:	93 58       	subi	r25, 0x83	; 131
    17be:	5f 4f       	sbci	r21, 0xFF	; 255
    17c0:	2a f0       	brmi	.+10     	; 0x17cc <__divsf3_pse+0x6c>
    17c2:	9e 3f       	cpi	r25, 0xFE	; 254
    17c4:	51 05       	cpc	r21, r1
    17c6:	68 f0       	brcs	.+26     	; 0x17e2 <__divsf3_pse+0x82>
    17c8:	b1 c0       	rjmp	.+354    	; 0x192c <__fp_inf>
    17ca:	fb c0       	rjmp	.+502    	; 0x19c2 <__fp_szero>
    17cc:	5f 3f       	cpi	r21, 0xFF	; 255
    17ce:	ec f3       	brlt	.-6      	; 0x17ca <__divsf3_pse+0x6a>
    17d0:	98 3e       	cpi	r25, 0xE8	; 232
    17d2:	dc f3       	brlt	.-10     	; 0x17ca <__divsf3_pse+0x6a>
    17d4:	86 95       	lsr	r24
    17d6:	77 95       	ror	r23
    17d8:	67 95       	ror	r22
    17da:	b7 95       	ror	r27
    17dc:	f7 95       	ror	r31
    17de:	9f 5f       	subi	r25, 0xFF	; 255
    17e0:	c9 f7       	brne	.-14     	; 0x17d4 <__divsf3_pse+0x74>
    17e2:	88 0f       	add	r24, r24
    17e4:	91 1d       	adc	r25, r1
    17e6:	96 95       	lsr	r25
    17e8:	87 95       	ror	r24
    17ea:	97 f9       	bld	r25, 7
    17ec:	08 95       	ret
    17ee:	e1 e0       	ldi	r30, 0x01	; 1
    17f0:	66 0f       	add	r22, r22
    17f2:	77 1f       	adc	r23, r23
    17f4:	88 1f       	adc	r24, r24
    17f6:	bb 1f       	adc	r27, r27
    17f8:	62 17       	cp	r22, r18
    17fa:	73 07       	cpc	r23, r19
    17fc:	84 07       	cpc	r24, r20
    17fe:	ba 07       	cpc	r27, r26
    1800:	20 f0       	brcs	.+8      	; 0x180a <__divsf3_pse+0xaa>
    1802:	62 1b       	sub	r22, r18
    1804:	73 0b       	sbc	r23, r19
    1806:	84 0b       	sbc	r24, r20
    1808:	ba 0b       	sbc	r27, r26
    180a:	ee 1f       	adc	r30, r30
    180c:	88 f7       	brcc	.-30     	; 0x17f0 <__divsf3_pse+0x90>
    180e:	e0 95       	com	r30
    1810:	08 95       	ret

00001812 <__fixunssfsi>:
    1812:	bc d0       	rcall	.+376    	; 0x198c <__fp_splitA>
    1814:	88 f0       	brcs	.+34     	; 0x1838 <__fixunssfsi+0x26>
    1816:	9f 57       	subi	r25, 0x7F	; 127
    1818:	90 f0       	brcs	.+36     	; 0x183e <__fixunssfsi+0x2c>
    181a:	b9 2f       	mov	r27, r25
    181c:	99 27       	eor	r25, r25
    181e:	b7 51       	subi	r27, 0x17	; 23
    1820:	a0 f0       	brcs	.+40     	; 0x184a <__fixunssfsi+0x38>
    1822:	d1 f0       	breq	.+52     	; 0x1858 <__fixunssfsi+0x46>
    1824:	66 0f       	add	r22, r22
    1826:	77 1f       	adc	r23, r23
    1828:	88 1f       	adc	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	1a f0       	brmi	.+6      	; 0x1834 <__fixunssfsi+0x22>
    182e:	ba 95       	dec	r27
    1830:	c9 f7       	brne	.-14     	; 0x1824 <__fixunssfsi+0x12>
    1832:	12 c0       	rjmp	.+36     	; 0x1858 <__fixunssfsi+0x46>
    1834:	b1 30       	cpi	r27, 0x01	; 1
    1836:	81 f0       	breq	.+32     	; 0x1858 <__fixunssfsi+0x46>
    1838:	c3 d0       	rcall	.+390    	; 0x19c0 <__fp_zero>
    183a:	b1 e0       	ldi	r27, 0x01	; 1
    183c:	08 95       	ret
    183e:	c0 c0       	rjmp	.+384    	; 0x19c0 <__fp_zero>
    1840:	67 2f       	mov	r22, r23
    1842:	78 2f       	mov	r23, r24
    1844:	88 27       	eor	r24, r24
    1846:	b8 5f       	subi	r27, 0xF8	; 248
    1848:	39 f0       	breq	.+14     	; 0x1858 <__fixunssfsi+0x46>
    184a:	b9 3f       	cpi	r27, 0xF9	; 249
    184c:	cc f3       	brlt	.-14     	; 0x1840 <__fixunssfsi+0x2e>
    184e:	86 95       	lsr	r24
    1850:	77 95       	ror	r23
    1852:	67 95       	ror	r22
    1854:	b3 95       	inc	r27
    1856:	d9 f7       	brne	.-10     	; 0x184e <__fixunssfsi+0x3c>
    1858:	3e f4       	brtc	.+14     	; 0x1868 <__fixunssfsi+0x56>
    185a:	90 95       	com	r25
    185c:	80 95       	com	r24
    185e:	70 95       	com	r23
    1860:	61 95       	neg	r22
    1862:	7f 4f       	sbci	r23, 0xFF	; 255
    1864:	8f 4f       	sbci	r24, 0xFF	; 255
    1866:	9f 4f       	sbci	r25, 0xFF	; 255
    1868:	08 95       	ret

0000186a <__floatunsisf>:
    186a:	e8 94       	clt
    186c:	09 c0       	rjmp	.+18     	; 0x1880 <__floatsisf+0x12>

0000186e <__floatsisf>:
    186e:	97 fb       	bst	r25, 7
    1870:	3e f4       	brtc	.+14     	; 0x1880 <__floatsisf+0x12>
    1872:	90 95       	com	r25
    1874:	80 95       	com	r24
    1876:	70 95       	com	r23
    1878:	61 95       	neg	r22
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	8f 4f       	sbci	r24, 0xFF	; 255
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	99 23       	and	r25, r25
    1882:	a9 f0       	breq	.+42     	; 0x18ae <__floatsisf+0x40>
    1884:	f9 2f       	mov	r31, r25
    1886:	96 e9       	ldi	r25, 0x96	; 150
    1888:	bb 27       	eor	r27, r27
    188a:	93 95       	inc	r25
    188c:	f6 95       	lsr	r31
    188e:	87 95       	ror	r24
    1890:	77 95       	ror	r23
    1892:	67 95       	ror	r22
    1894:	b7 95       	ror	r27
    1896:	f1 11       	cpse	r31, r1
    1898:	f8 cf       	rjmp	.-16     	; 0x188a <__floatsisf+0x1c>
    189a:	fa f4       	brpl	.+62     	; 0x18da <__floatsisf+0x6c>
    189c:	bb 0f       	add	r27, r27
    189e:	11 f4       	brne	.+4      	; 0x18a4 <__floatsisf+0x36>
    18a0:	60 ff       	sbrs	r22, 0
    18a2:	1b c0       	rjmp	.+54     	; 0x18da <__floatsisf+0x6c>
    18a4:	6f 5f       	subi	r22, 0xFF	; 255
    18a6:	7f 4f       	sbci	r23, 0xFF	; 255
    18a8:	8f 4f       	sbci	r24, 0xFF	; 255
    18aa:	9f 4f       	sbci	r25, 0xFF	; 255
    18ac:	16 c0       	rjmp	.+44     	; 0x18da <__floatsisf+0x6c>
    18ae:	88 23       	and	r24, r24
    18b0:	11 f0       	breq	.+4      	; 0x18b6 <__floatsisf+0x48>
    18b2:	96 e9       	ldi	r25, 0x96	; 150
    18b4:	11 c0       	rjmp	.+34     	; 0x18d8 <__floatsisf+0x6a>
    18b6:	77 23       	and	r23, r23
    18b8:	21 f0       	breq	.+8      	; 0x18c2 <__floatsisf+0x54>
    18ba:	9e e8       	ldi	r25, 0x8E	; 142
    18bc:	87 2f       	mov	r24, r23
    18be:	76 2f       	mov	r23, r22
    18c0:	05 c0       	rjmp	.+10     	; 0x18cc <__floatsisf+0x5e>
    18c2:	66 23       	and	r22, r22
    18c4:	71 f0       	breq	.+28     	; 0x18e2 <__floatsisf+0x74>
    18c6:	96 e8       	ldi	r25, 0x86	; 134
    18c8:	86 2f       	mov	r24, r22
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	2a f0       	brmi	.+10     	; 0x18da <__floatsisf+0x6c>
    18d0:	9a 95       	dec	r25
    18d2:	66 0f       	add	r22, r22
    18d4:	77 1f       	adc	r23, r23
    18d6:	88 1f       	adc	r24, r24
    18d8:	da f7       	brpl	.-10     	; 0x18d0 <__floatsisf+0x62>
    18da:	88 0f       	add	r24, r24
    18dc:	96 95       	lsr	r25
    18de:	87 95       	ror	r24
    18e0:	97 f9       	bld	r25, 7
    18e2:	08 95       	ret

000018e4 <__fp_cmp>:
    18e4:	99 0f       	add	r25, r25
    18e6:	00 08       	sbc	r0, r0
    18e8:	55 0f       	add	r21, r21
    18ea:	aa 0b       	sbc	r26, r26
    18ec:	e0 e8       	ldi	r30, 0x80	; 128
    18ee:	fe ef       	ldi	r31, 0xFE	; 254
    18f0:	16 16       	cp	r1, r22
    18f2:	17 06       	cpc	r1, r23
    18f4:	e8 07       	cpc	r30, r24
    18f6:	f9 07       	cpc	r31, r25
    18f8:	c0 f0       	brcs	.+48     	; 0x192a <__fp_cmp+0x46>
    18fa:	12 16       	cp	r1, r18
    18fc:	13 06       	cpc	r1, r19
    18fe:	e4 07       	cpc	r30, r20
    1900:	f5 07       	cpc	r31, r21
    1902:	98 f0       	brcs	.+38     	; 0x192a <__fp_cmp+0x46>
    1904:	62 1b       	sub	r22, r18
    1906:	73 0b       	sbc	r23, r19
    1908:	84 0b       	sbc	r24, r20
    190a:	95 0b       	sbc	r25, r21
    190c:	39 f4       	brne	.+14     	; 0x191c <__fp_cmp+0x38>
    190e:	0a 26       	eor	r0, r26
    1910:	61 f0       	breq	.+24     	; 0x192a <__fp_cmp+0x46>
    1912:	23 2b       	or	r18, r19
    1914:	24 2b       	or	r18, r20
    1916:	25 2b       	or	r18, r21
    1918:	21 f4       	brne	.+8      	; 0x1922 <__fp_cmp+0x3e>
    191a:	08 95       	ret
    191c:	0a 26       	eor	r0, r26
    191e:	09 f4       	brne	.+2      	; 0x1922 <__fp_cmp+0x3e>
    1920:	a1 40       	sbci	r26, 0x01	; 1
    1922:	a6 95       	lsr	r26
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	81 1d       	adc	r24, r1
    1928:	81 1d       	adc	r24, r1
    192a:	08 95       	ret

0000192c <__fp_inf>:
    192c:	97 f9       	bld	r25, 7
    192e:	9f 67       	ori	r25, 0x7F	; 127
    1930:	80 e8       	ldi	r24, 0x80	; 128
    1932:	70 e0       	ldi	r23, 0x00	; 0
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	08 95       	ret

00001938 <__fp_nan>:
    1938:	9f ef       	ldi	r25, 0xFF	; 255
    193a:	80 ec       	ldi	r24, 0xC0	; 192
    193c:	08 95       	ret

0000193e <__fp_pscA>:
    193e:	00 24       	eor	r0, r0
    1940:	0a 94       	dec	r0
    1942:	16 16       	cp	r1, r22
    1944:	17 06       	cpc	r1, r23
    1946:	18 06       	cpc	r1, r24
    1948:	09 06       	cpc	r0, r25
    194a:	08 95       	ret

0000194c <__fp_pscB>:
    194c:	00 24       	eor	r0, r0
    194e:	0a 94       	dec	r0
    1950:	12 16       	cp	r1, r18
    1952:	13 06       	cpc	r1, r19
    1954:	14 06       	cpc	r1, r20
    1956:	05 06       	cpc	r0, r21
    1958:	08 95       	ret

0000195a <__fp_round>:
    195a:	09 2e       	mov	r0, r25
    195c:	03 94       	inc	r0
    195e:	00 0c       	add	r0, r0
    1960:	11 f4       	brne	.+4      	; 0x1966 <__fp_round+0xc>
    1962:	88 23       	and	r24, r24
    1964:	52 f0       	brmi	.+20     	; 0x197a <__fp_round+0x20>
    1966:	bb 0f       	add	r27, r27
    1968:	40 f4       	brcc	.+16     	; 0x197a <__fp_round+0x20>
    196a:	bf 2b       	or	r27, r31
    196c:	11 f4       	brne	.+4      	; 0x1972 <__fp_round+0x18>
    196e:	60 ff       	sbrs	r22, 0
    1970:	04 c0       	rjmp	.+8      	; 0x197a <__fp_round+0x20>
    1972:	6f 5f       	subi	r22, 0xFF	; 255
    1974:	7f 4f       	sbci	r23, 0xFF	; 255
    1976:	8f 4f       	sbci	r24, 0xFF	; 255
    1978:	9f 4f       	sbci	r25, 0xFF	; 255
    197a:	08 95       	ret

0000197c <__fp_split3>:
    197c:	57 fd       	sbrc	r21, 7
    197e:	90 58       	subi	r25, 0x80	; 128
    1980:	44 0f       	add	r20, r20
    1982:	55 1f       	adc	r21, r21
    1984:	59 f0       	breq	.+22     	; 0x199c <__fp_splitA+0x10>
    1986:	5f 3f       	cpi	r21, 0xFF	; 255
    1988:	71 f0       	breq	.+28     	; 0x19a6 <__fp_splitA+0x1a>
    198a:	47 95       	ror	r20

0000198c <__fp_splitA>:
    198c:	88 0f       	add	r24, r24
    198e:	97 fb       	bst	r25, 7
    1990:	99 1f       	adc	r25, r25
    1992:	61 f0       	breq	.+24     	; 0x19ac <__fp_splitA+0x20>
    1994:	9f 3f       	cpi	r25, 0xFF	; 255
    1996:	79 f0       	breq	.+30     	; 0x19b6 <__fp_splitA+0x2a>
    1998:	87 95       	ror	r24
    199a:	08 95       	ret
    199c:	12 16       	cp	r1, r18
    199e:	13 06       	cpc	r1, r19
    19a0:	14 06       	cpc	r1, r20
    19a2:	55 1f       	adc	r21, r21
    19a4:	f2 cf       	rjmp	.-28     	; 0x198a <__fp_split3+0xe>
    19a6:	46 95       	lsr	r20
    19a8:	f1 df       	rcall	.-30     	; 0x198c <__fp_splitA>
    19aa:	08 c0       	rjmp	.+16     	; 0x19bc <__fp_splitA+0x30>
    19ac:	16 16       	cp	r1, r22
    19ae:	17 06       	cpc	r1, r23
    19b0:	18 06       	cpc	r1, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	f1 cf       	rjmp	.-30     	; 0x1998 <__fp_splitA+0xc>
    19b6:	86 95       	lsr	r24
    19b8:	71 05       	cpc	r23, r1
    19ba:	61 05       	cpc	r22, r1
    19bc:	08 94       	sec
    19be:	08 95       	ret

000019c0 <__fp_zero>:
    19c0:	e8 94       	clt

000019c2 <__fp_szero>:
    19c2:	bb 27       	eor	r27, r27
    19c4:	66 27       	eor	r22, r22
    19c6:	77 27       	eor	r23, r23
    19c8:	cb 01       	movw	r24, r22
    19ca:	97 f9       	bld	r25, 7
    19cc:	08 95       	ret

000019ce <__mulsf3>:
    19ce:	0b d0       	rcall	.+22     	; 0x19e6 <__mulsf3x>
    19d0:	c4 cf       	rjmp	.-120    	; 0x195a <__fp_round>
    19d2:	b5 df       	rcall	.-150    	; 0x193e <__fp_pscA>
    19d4:	28 f0       	brcs	.+10     	; 0x19e0 <__mulsf3+0x12>
    19d6:	ba df       	rcall	.-140    	; 0x194c <__fp_pscB>
    19d8:	18 f0       	brcs	.+6      	; 0x19e0 <__mulsf3+0x12>
    19da:	95 23       	and	r25, r21
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <__mulsf3+0x12>
    19de:	a6 cf       	rjmp	.-180    	; 0x192c <__fp_inf>
    19e0:	ab cf       	rjmp	.-170    	; 0x1938 <__fp_nan>
    19e2:	11 24       	eor	r1, r1
    19e4:	ee cf       	rjmp	.-36     	; 0x19c2 <__fp_szero>

000019e6 <__mulsf3x>:
    19e6:	ca df       	rcall	.-108    	; 0x197c <__fp_split3>
    19e8:	a0 f3       	brcs	.-24     	; 0x19d2 <__mulsf3+0x4>

000019ea <__mulsf3_pse>:
    19ea:	95 9f       	mul	r25, r21
    19ec:	d1 f3       	breq	.-12     	; 0x19e2 <__mulsf3+0x14>
    19ee:	95 0f       	add	r25, r21
    19f0:	50 e0       	ldi	r21, 0x00	; 0
    19f2:	55 1f       	adc	r21, r21
    19f4:	62 9f       	mul	r22, r18
    19f6:	f0 01       	movw	r30, r0
    19f8:	72 9f       	mul	r23, r18
    19fa:	bb 27       	eor	r27, r27
    19fc:	f0 0d       	add	r31, r0
    19fe:	b1 1d       	adc	r27, r1
    1a00:	63 9f       	mul	r22, r19
    1a02:	aa 27       	eor	r26, r26
    1a04:	f0 0d       	add	r31, r0
    1a06:	b1 1d       	adc	r27, r1
    1a08:	aa 1f       	adc	r26, r26
    1a0a:	64 9f       	mul	r22, r20
    1a0c:	66 27       	eor	r22, r22
    1a0e:	b0 0d       	add	r27, r0
    1a10:	a1 1d       	adc	r26, r1
    1a12:	66 1f       	adc	r22, r22
    1a14:	82 9f       	mul	r24, r18
    1a16:	22 27       	eor	r18, r18
    1a18:	b0 0d       	add	r27, r0
    1a1a:	a1 1d       	adc	r26, r1
    1a1c:	62 1f       	adc	r22, r18
    1a1e:	73 9f       	mul	r23, r19
    1a20:	b0 0d       	add	r27, r0
    1a22:	a1 1d       	adc	r26, r1
    1a24:	62 1f       	adc	r22, r18
    1a26:	83 9f       	mul	r24, r19
    1a28:	a0 0d       	add	r26, r0
    1a2a:	61 1d       	adc	r22, r1
    1a2c:	22 1f       	adc	r18, r18
    1a2e:	74 9f       	mul	r23, r20
    1a30:	33 27       	eor	r19, r19
    1a32:	a0 0d       	add	r26, r0
    1a34:	61 1d       	adc	r22, r1
    1a36:	23 1f       	adc	r18, r19
    1a38:	84 9f       	mul	r24, r20
    1a3a:	60 0d       	add	r22, r0
    1a3c:	21 1d       	adc	r18, r1
    1a3e:	82 2f       	mov	r24, r18
    1a40:	76 2f       	mov	r23, r22
    1a42:	6a 2f       	mov	r22, r26
    1a44:	11 24       	eor	r1, r1
    1a46:	9f 57       	subi	r25, 0x7F	; 127
    1a48:	50 40       	sbci	r21, 0x00	; 0
    1a4a:	8a f0       	brmi	.+34     	; 0x1a6e <__mulsf3_pse+0x84>
    1a4c:	e1 f0       	breq	.+56     	; 0x1a86 <__mulsf3_pse+0x9c>
    1a4e:	88 23       	and	r24, r24
    1a50:	4a f0       	brmi	.+18     	; 0x1a64 <__mulsf3_pse+0x7a>
    1a52:	ee 0f       	add	r30, r30
    1a54:	ff 1f       	adc	r31, r31
    1a56:	bb 1f       	adc	r27, r27
    1a58:	66 1f       	adc	r22, r22
    1a5a:	77 1f       	adc	r23, r23
    1a5c:	88 1f       	adc	r24, r24
    1a5e:	91 50       	subi	r25, 0x01	; 1
    1a60:	50 40       	sbci	r21, 0x00	; 0
    1a62:	a9 f7       	brne	.-22     	; 0x1a4e <__mulsf3_pse+0x64>
    1a64:	9e 3f       	cpi	r25, 0xFE	; 254
    1a66:	51 05       	cpc	r21, r1
    1a68:	70 f0       	brcs	.+28     	; 0x1a86 <__mulsf3_pse+0x9c>
    1a6a:	60 cf       	rjmp	.-320    	; 0x192c <__fp_inf>
    1a6c:	aa cf       	rjmp	.-172    	; 0x19c2 <__fp_szero>
    1a6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a70:	ec f3       	brlt	.-6      	; 0x1a6c <__mulsf3_pse+0x82>
    1a72:	98 3e       	cpi	r25, 0xE8	; 232
    1a74:	dc f3       	brlt	.-10     	; 0x1a6c <__mulsf3_pse+0x82>
    1a76:	86 95       	lsr	r24
    1a78:	77 95       	ror	r23
    1a7a:	67 95       	ror	r22
    1a7c:	b7 95       	ror	r27
    1a7e:	f7 95       	ror	r31
    1a80:	e7 95       	ror	r30
    1a82:	9f 5f       	subi	r25, 0xFF	; 255
    1a84:	c1 f7       	brne	.-16     	; 0x1a76 <__mulsf3_pse+0x8c>
    1a86:	fe 2b       	or	r31, r30
    1a88:	88 0f       	add	r24, r24
    1a8a:	91 1d       	adc	r25, r1
    1a8c:	96 95       	lsr	r25
    1a8e:	87 95       	ror	r24
    1a90:	97 f9       	bld	r25, 7
    1a92:	08 95       	ret

00001a94 <__udivmodsi4>:
    1a94:	a1 e2       	ldi	r26, 0x21	; 33
    1a96:	1a 2e       	mov	r1, r26
    1a98:	aa 1b       	sub	r26, r26
    1a9a:	bb 1b       	sub	r27, r27
    1a9c:	fd 01       	movw	r30, r26
    1a9e:	0d c0       	rjmp	.+26     	; 0x1aba <__udivmodsi4_ep>

00001aa0 <__udivmodsi4_loop>:
    1aa0:	aa 1f       	adc	r26, r26
    1aa2:	bb 1f       	adc	r27, r27
    1aa4:	ee 1f       	adc	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	a2 17       	cp	r26, r18
    1aaa:	b3 07       	cpc	r27, r19
    1aac:	e4 07       	cpc	r30, r20
    1aae:	f5 07       	cpc	r31, r21
    1ab0:	20 f0       	brcs	.+8      	; 0x1aba <__udivmodsi4_ep>
    1ab2:	a2 1b       	sub	r26, r18
    1ab4:	b3 0b       	sbc	r27, r19
    1ab6:	e4 0b       	sbc	r30, r20
    1ab8:	f5 0b       	sbc	r31, r21

00001aba <__udivmodsi4_ep>:
    1aba:	66 1f       	adc	r22, r22
    1abc:	77 1f       	adc	r23, r23
    1abe:	88 1f       	adc	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	1a 94       	dec	r1
    1ac4:	69 f7       	brne	.-38     	; 0x1aa0 <__udivmodsi4_loop>
    1ac6:	60 95       	com	r22
    1ac8:	70 95       	com	r23
    1aca:	80 95       	com	r24
    1acc:	90 95       	com	r25
    1ace:	9b 01       	movw	r18, r22
    1ad0:	ac 01       	movw	r20, r24
    1ad2:	bd 01       	movw	r22, r26
    1ad4:	cf 01       	movw	r24, r30
    1ad6:	08 95       	ret

00001ad8 <snprintf>:
    1ad8:	ae e0       	ldi	r26, 0x0E	; 14
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e2 e7       	ldi	r30, 0x72	; 114
    1ade:	fd e0       	ldi	r31, 0x0D	; 13
    1ae0:	0c 94 28 10 	jmp	0x2050	; 0x2050 <__prologue_saves__+0x1c>
    1ae4:	0d 89       	ldd	r16, Y+21	; 0x15
    1ae6:	1e 89       	ldd	r17, Y+22	; 0x16
    1ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aea:	98 8d       	ldd	r25, Y+24	; 0x18
    1aec:	26 e0       	ldi	r18, 0x06	; 6
    1aee:	2c 83       	std	Y+4, r18	; 0x04
    1af0:	1a 83       	std	Y+2, r17	; 0x02
    1af2:	09 83       	std	Y+1, r16	; 0x01
    1af4:	97 ff       	sbrs	r25, 7
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <snprintf+0x24>
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e8       	ldi	r25, 0x80	; 128
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	9e 83       	std	Y+6, r25	; 0x06
    1b00:	8d 83       	std	Y+5, r24	; 0x05
    1b02:	ae 01       	movw	r20, r28
    1b04:	45 5e       	subi	r20, 0xE5	; 229
    1b06:	5f 4f       	sbci	r21, 0xFF	; 255
    1b08:	ce 01       	movw	r24, r28
    1b0a:	01 96       	adiw	r24, 0x01	; 1
    1b0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b10:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <vfprintf>
    1b14:	4d 81       	ldd	r20, Y+5	; 0x05
    1b16:	5e 81       	ldd	r21, Y+6	; 0x06
    1b18:	57 fd       	sbrc	r21, 7
    1b1a:	0a c0       	rjmp	.+20     	; 0x1b30 <snprintf+0x58>
    1b1c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b1e:	38 85       	ldd	r19, Y+8	; 0x08
    1b20:	42 17       	cp	r20, r18
    1b22:	53 07       	cpc	r21, r19
    1b24:	0c f4       	brge	.+2      	; 0x1b28 <snprintf+0x50>
    1b26:	9a 01       	movw	r18, r20
    1b28:	02 0f       	add	r16, r18
    1b2a:	13 1f       	adc	r17, r19
    1b2c:	f8 01       	movw	r30, r16
    1b2e:	10 82       	st	Z, r1
    1b30:	2e 96       	adiw	r28, 0x0e	; 14
    1b32:	e4 e0       	ldi	r30, 0x04	; 4
    1b34:	0c 94 44 10 	jmp	0x2088	; 0x2088 <__epilogue_restores__+0x1c>

00001b38 <vfprintf>:
    1b38:	ad e0       	ldi	r26, 0x0D	; 13
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e2 ea       	ldi	r30, 0xA2	; 162
    1b3e:	fd e0       	ldi	r31, 0x0D	; 13
    1b40:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <__prologue_saves__>
    1b44:	3c 01       	movw	r6, r24
    1b46:	7d 87       	std	Y+13, r23	; 0x0d
    1b48:	6c 87       	std	Y+12, r22	; 0x0c
    1b4a:	5a 01       	movw	r10, r20
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	17 82       	std	Z+7, r1	; 0x07
    1b50:	16 82       	std	Z+6, r1	; 0x06
    1b52:	83 81       	ldd	r24, Z+3	; 0x03
    1b54:	81 ff       	sbrs	r24, 1
    1b56:	c8 c1       	rjmp	.+912    	; 0x1ee8 <vfprintf+0x3b0>
    1b58:	2e 01       	movw	r4, r28
    1b5a:	08 94       	sec
    1b5c:	41 1c       	adc	r4, r1
    1b5e:	51 1c       	adc	r5, r1
    1b60:	f3 01       	movw	r30, r6
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	ec 85       	ldd	r30, Y+12	; 0x0c
    1b66:	fd 85       	ldd	r31, Y+13	; 0x0d
    1b68:	93 fd       	sbrc	r25, 3
    1b6a:	85 91       	lpm	r24, Z+
    1b6c:	93 ff       	sbrs	r25, 3
    1b6e:	81 91       	ld	r24, Z+
    1b70:	fd 87       	std	Y+13, r31	; 0x0d
    1b72:	ec 87       	std	Y+12, r30	; 0x0c
    1b74:	88 23       	and	r24, r24
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <vfprintf+0x42>
    1b78:	b3 c1       	rjmp	.+870    	; 0x1ee0 <vfprintf+0x3a8>
    1b7a:	85 32       	cpi	r24, 0x25	; 37
    1b7c:	41 f4       	brne	.+16     	; 0x1b8e <vfprintf+0x56>
    1b7e:	93 fd       	sbrc	r25, 3
    1b80:	85 91       	lpm	r24, Z+
    1b82:	93 ff       	sbrs	r25, 3
    1b84:	81 91       	ld	r24, Z+
    1b86:	fd 87       	std	Y+13, r31	; 0x0d
    1b88:	ec 87       	std	Y+12, r30	; 0x0c
    1b8a:	85 32       	cpi	r24, 0x25	; 37
    1b8c:	29 f4       	brne	.+10     	; 0x1b98 <vfprintf+0x60>
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	b3 01       	movw	r22, r6
    1b92:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <fputc>
    1b96:	e4 cf       	rjmp	.-56     	; 0x1b60 <vfprintf+0x28>
    1b98:	ff 24       	eor	r15, r15
    1b9a:	ee 24       	eor	r14, r14
    1b9c:	10 e0       	ldi	r17, 0x00	; 0
    1b9e:	10 32       	cpi	r17, 0x20	; 32
    1ba0:	b0 f4       	brcc	.+44     	; 0x1bce <vfprintf+0x96>
    1ba2:	8b 32       	cpi	r24, 0x2B	; 43
    1ba4:	69 f0       	breq	.+26     	; 0x1bc0 <vfprintf+0x88>
    1ba6:	8c 32       	cpi	r24, 0x2C	; 44
    1ba8:	28 f4       	brcc	.+10     	; 0x1bb4 <vfprintf+0x7c>
    1baa:	80 32       	cpi	r24, 0x20	; 32
    1bac:	51 f0       	breq	.+20     	; 0x1bc2 <vfprintf+0x8a>
    1bae:	83 32       	cpi	r24, 0x23	; 35
    1bb0:	71 f4       	brne	.+28     	; 0x1bce <vfprintf+0x96>
    1bb2:	0b c0       	rjmp	.+22     	; 0x1bca <vfprintf+0x92>
    1bb4:	8d 32       	cpi	r24, 0x2D	; 45
    1bb6:	39 f0       	breq	.+14     	; 0x1bc6 <vfprintf+0x8e>
    1bb8:	80 33       	cpi	r24, 0x30	; 48
    1bba:	49 f4       	brne	.+18     	; 0x1bce <vfprintf+0x96>
    1bbc:	11 60       	ori	r17, 0x01	; 1
    1bbe:	2c c0       	rjmp	.+88     	; 0x1c18 <vfprintf+0xe0>
    1bc0:	12 60       	ori	r17, 0x02	; 2
    1bc2:	14 60       	ori	r17, 0x04	; 4
    1bc4:	29 c0       	rjmp	.+82     	; 0x1c18 <vfprintf+0xe0>
    1bc6:	18 60       	ori	r17, 0x08	; 8
    1bc8:	27 c0       	rjmp	.+78     	; 0x1c18 <vfprintf+0xe0>
    1bca:	10 61       	ori	r17, 0x10	; 16
    1bcc:	25 c0       	rjmp	.+74     	; 0x1c18 <vfprintf+0xe0>
    1bce:	17 fd       	sbrc	r17, 7
    1bd0:	2e c0       	rjmp	.+92     	; 0x1c2e <vfprintf+0xf6>
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	20 53       	subi	r18, 0x30	; 48
    1bd6:	2a 30       	cpi	r18, 0x0A	; 10
    1bd8:	98 f4       	brcc	.+38     	; 0x1c00 <vfprintf+0xc8>
    1bda:	16 ff       	sbrs	r17, 6
    1bdc:	08 c0       	rjmp	.+16     	; 0x1bee <vfprintf+0xb6>
    1bde:	8f 2d       	mov	r24, r15
    1be0:	88 0f       	add	r24, r24
    1be2:	f8 2e       	mov	r15, r24
    1be4:	ff 0c       	add	r15, r15
    1be6:	ff 0c       	add	r15, r15
    1be8:	f8 0e       	add	r15, r24
    1bea:	f2 0e       	add	r15, r18
    1bec:	15 c0       	rjmp	.+42     	; 0x1c18 <vfprintf+0xe0>
    1bee:	8e 2d       	mov	r24, r14
    1bf0:	88 0f       	add	r24, r24
    1bf2:	e8 2e       	mov	r14, r24
    1bf4:	ee 0c       	add	r14, r14
    1bf6:	ee 0c       	add	r14, r14
    1bf8:	e8 0e       	add	r14, r24
    1bfa:	e2 0e       	add	r14, r18
    1bfc:	10 62       	ori	r17, 0x20	; 32
    1bfe:	0c c0       	rjmp	.+24     	; 0x1c18 <vfprintf+0xe0>
    1c00:	8e 32       	cpi	r24, 0x2E	; 46
    1c02:	21 f4       	brne	.+8      	; 0x1c0c <vfprintf+0xd4>
    1c04:	16 fd       	sbrc	r17, 6
    1c06:	6c c1       	rjmp	.+728    	; 0x1ee0 <vfprintf+0x3a8>
    1c08:	10 64       	ori	r17, 0x40	; 64
    1c0a:	06 c0       	rjmp	.+12     	; 0x1c18 <vfprintf+0xe0>
    1c0c:	8c 36       	cpi	r24, 0x6C	; 108
    1c0e:	11 f4       	brne	.+4      	; 0x1c14 <vfprintf+0xdc>
    1c10:	10 68       	ori	r17, 0x80	; 128
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <vfprintf+0xe0>
    1c14:	88 36       	cpi	r24, 0x68	; 104
    1c16:	59 f4       	brne	.+22     	; 0x1c2e <vfprintf+0xf6>
    1c18:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c1a:	fd 85       	ldd	r31, Y+13	; 0x0d
    1c1c:	93 fd       	sbrc	r25, 3
    1c1e:	85 91       	lpm	r24, Z+
    1c20:	93 ff       	sbrs	r25, 3
    1c22:	81 91       	ld	r24, Z+
    1c24:	fd 87       	std	Y+13, r31	; 0x0d
    1c26:	ec 87       	std	Y+12, r30	; 0x0c
    1c28:	88 23       	and	r24, r24
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <vfprintf+0xf6>
    1c2c:	b8 cf       	rjmp	.-144    	; 0x1b9e <vfprintf+0x66>
    1c2e:	98 2f       	mov	r25, r24
    1c30:	95 54       	subi	r25, 0x45	; 69
    1c32:	93 30       	cpi	r25, 0x03	; 3
    1c34:	18 f0       	brcs	.+6      	; 0x1c3c <vfprintf+0x104>
    1c36:	90 52       	subi	r25, 0x20	; 32
    1c38:	93 30       	cpi	r25, 0x03	; 3
    1c3a:	38 f4       	brcc	.+14     	; 0x1c4a <vfprintf+0x112>
    1c3c:	24 e0       	ldi	r18, 0x04	; 4
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	a2 0e       	add	r10, r18
    1c42:	b3 1e       	adc	r11, r19
    1c44:	3f e3       	ldi	r19, 0x3F	; 63
    1c46:	39 83       	std	Y+1, r19	; 0x01
    1c48:	0f c0       	rjmp	.+30     	; 0x1c68 <vfprintf+0x130>
    1c4a:	83 36       	cpi	r24, 0x63	; 99
    1c4c:	31 f0       	breq	.+12     	; 0x1c5a <vfprintf+0x122>
    1c4e:	83 37       	cpi	r24, 0x73	; 115
    1c50:	81 f0       	breq	.+32     	; 0x1c72 <vfprintf+0x13a>
    1c52:	83 35       	cpi	r24, 0x53	; 83
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <vfprintf+0x120>
    1c56:	5a c0       	rjmp	.+180    	; 0x1d0c <vfprintf+0x1d4>
    1c58:	22 c0       	rjmp	.+68     	; 0x1c9e <vfprintf+0x166>
    1c5a:	f5 01       	movw	r30, r10
    1c5c:	80 81       	ld	r24, Z
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	22 e0       	ldi	r18, 0x02	; 2
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	a2 0e       	add	r10, r18
    1c66:	b3 1e       	adc	r11, r19
    1c68:	21 e0       	ldi	r18, 0x01	; 1
    1c6a:	c2 2e       	mov	r12, r18
    1c6c:	d1 2c       	mov	r13, r1
    1c6e:	42 01       	movw	r8, r4
    1c70:	14 c0       	rjmp	.+40     	; 0x1c9a <vfprintf+0x162>
    1c72:	92 e0       	ldi	r25, 0x02	; 2
    1c74:	29 2e       	mov	r2, r25
    1c76:	31 2c       	mov	r3, r1
    1c78:	2a 0c       	add	r2, r10
    1c7a:	3b 1c       	adc	r3, r11
    1c7c:	f5 01       	movw	r30, r10
    1c7e:	80 80       	ld	r8, Z
    1c80:	91 80       	ldd	r9, Z+1	; 0x01
    1c82:	16 ff       	sbrs	r17, 6
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <vfprintf+0x154>
    1c86:	6f 2d       	mov	r22, r15
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <vfprintf+0x158>
    1c8c:	6f ef       	ldi	r22, 0xFF	; 255
    1c8e:	7f ef       	ldi	r23, 0xFF	; 255
    1c90:	c4 01       	movw	r24, r8
    1c92:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <strnlen>
    1c96:	6c 01       	movw	r12, r24
    1c98:	51 01       	movw	r10, r2
    1c9a:	1f 77       	andi	r17, 0x7F	; 127
    1c9c:	15 c0       	rjmp	.+42     	; 0x1cc8 <vfprintf+0x190>
    1c9e:	82 e0       	ldi	r24, 0x02	; 2
    1ca0:	28 2e       	mov	r2, r24
    1ca2:	31 2c       	mov	r3, r1
    1ca4:	2a 0c       	add	r2, r10
    1ca6:	3b 1c       	adc	r3, r11
    1ca8:	f5 01       	movw	r30, r10
    1caa:	80 80       	ld	r8, Z
    1cac:	91 80       	ldd	r9, Z+1	; 0x01
    1cae:	16 ff       	sbrs	r17, 6
    1cb0:	03 c0       	rjmp	.+6      	; 0x1cb8 <vfprintf+0x180>
    1cb2:	6f 2d       	mov	r22, r15
    1cb4:	70 e0       	ldi	r23, 0x00	; 0
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <vfprintf+0x184>
    1cb8:	6f ef       	ldi	r22, 0xFF	; 255
    1cba:	7f ef       	ldi	r23, 0xFF	; 255
    1cbc:	c4 01       	movw	r24, r8
    1cbe:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <strnlen_P>
    1cc2:	6c 01       	movw	r12, r24
    1cc4:	10 68       	ori	r17, 0x80	; 128
    1cc6:	51 01       	movw	r10, r2
    1cc8:	13 fd       	sbrc	r17, 3
    1cca:	1c c0       	rjmp	.+56     	; 0x1d04 <vfprintf+0x1cc>
    1ccc:	06 c0       	rjmp	.+12     	; 0x1cda <vfprintf+0x1a2>
    1cce:	80 e2       	ldi	r24, 0x20	; 32
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	b3 01       	movw	r22, r6
    1cd4:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <fputc>
    1cd8:	ea 94       	dec	r14
    1cda:	8e 2d       	mov	r24, r14
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	c8 16       	cp	r12, r24
    1ce0:	d9 06       	cpc	r13, r25
    1ce2:	a8 f3       	brcs	.-22     	; 0x1cce <vfprintf+0x196>
    1ce4:	0f c0       	rjmp	.+30     	; 0x1d04 <vfprintf+0x1cc>
    1ce6:	f4 01       	movw	r30, r8
    1ce8:	17 fd       	sbrc	r17, 7
    1cea:	85 91       	lpm	r24, Z+
    1cec:	17 ff       	sbrs	r17, 7
    1cee:	81 91       	ld	r24, Z+
    1cf0:	4f 01       	movw	r8, r30
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	b3 01       	movw	r22, r6
    1cf6:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <fputc>
    1cfa:	e1 10       	cpse	r14, r1
    1cfc:	ea 94       	dec	r14
    1cfe:	08 94       	sec
    1d00:	c1 08       	sbc	r12, r1
    1d02:	d1 08       	sbc	r13, r1
    1d04:	c1 14       	cp	r12, r1
    1d06:	d1 04       	cpc	r13, r1
    1d08:	71 f7       	brne	.-36     	; 0x1ce6 <vfprintf+0x1ae>
    1d0a:	e7 c0       	rjmp	.+462    	; 0x1eda <vfprintf+0x3a2>
    1d0c:	84 36       	cpi	r24, 0x64	; 100
    1d0e:	11 f0       	breq	.+4      	; 0x1d14 <vfprintf+0x1dc>
    1d10:	89 36       	cpi	r24, 0x69	; 105
    1d12:	51 f5       	brne	.+84     	; 0x1d68 <vfprintf+0x230>
    1d14:	f5 01       	movw	r30, r10
    1d16:	17 ff       	sbrs	r17, 7
    1d18:	07 c0       	rjmp	.+14     	; 0x1d28 <vfprintf+0x1f0>
    1d1a:	80 81       	ld	r24, Z
    1d1c:	91 81       	ldd	r25, Z+1	; 0x01
    1d1e:	a2 81       	ldd	r26, Z+2	; 0x02
    1d20:	b3 81       	ldd	r27, Z+3	; 0x03
    1d22:	24 e0       	ldi	r18, 0x04	; 4
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	08 c0       	rjmp	.+16     	; 0x1d38 <vfprintf+0x200>
    1d28:	80 81       	ld	r24, Z
    1d2a:	91 81       	ldd	r25, Z+1	; 0x01
    1d2c:	aa 27       	eor	r26, r26
    1d2e:	97 fd       	sbrc	r25, 7
    1d30:	a0 95       	com	r26
    1d32:	ba 2f       	mov	r27, r26
    1d34:	22 e0       	ldi	r18, 0x02	; 2
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	a2 0e       	add	r10, r18
    1d3a:	b3 1e       	adc	r11, r19
    1d3c:	01 2f       	mov	r16, r17
    1d3e:	0f 76       	andi	r16, 0x6F	; 111
    1d40:	b7 ff       	sbrs	r27, 7
    1d42:	08 c0       	rjmp	.+16     	; 0x1d54 <vfprintf+0x21c>
    1d44:	b0 95       	com	r27
    1d46:	a0 95       	com	r26
    1d48:	90 95       	com	r25
    1d4a:	81 95       	neg	r24
    1d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4e:	af 4f       	sbci	r26, 0xFF	; 255
    1d50:	bf 4f       	sbci	r27, 0xFF	; 255
    1d52:	00 68       	ori	r16, 0x80	; 128
    1d54:	bc 01       	movw	r22, r24
    1d56:	cd 01       	movw	r24, r26
    1d58:	a2 01       	movw	r20, r4
    1d5a:	2a e0       	ldi	r18, 0x0A	; 10
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__ultoa_invert>
    1d62:	d8 2e       	mov	r13, r24
    1d64:	d4 18       	sub	r13, r4
    1d66:	3f c0       	rjmp	.+126    	; 0x1de6 <vfprintf+0x2ae>
    1d68:	85 37       	cpi	r24, 0x75	; 117
    1d6a:	21 f4       	brne	.+8      	; 0x1d74 <vfprintf+0x23c>
    1d6c:	1f 7e       	andi	r17, 0xEF	; 239
    1d6e:	2a e0       	ldi	r18, 0x0A	; 10
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	20 c0       	rjmp	.+64     	; 0x1db4 <vfprintf+0x27c>
    1d74:	19 7f       	andi	r17, 0xF9	; 249
    1d76:	8f 36       	cpi	r24, 0x6F	; 111
    1d78:	a9 f0       	breq	.+42     	; 0x1da4 <vfprintf+0x26c>
    1d7a:	80 37       	cpi	r24, 0x70	; 112
    1d7c:	20 f4       	brcc	.+8      	; 0x1d86 <vfprintf+0x24e>
    1d7e:	88 35       	cpi	r24, 0x58	; 88
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <vfprintf+0x24c>
    1d82:	ae c0       	rjmp	.+348    	; 0x1ee0 <vfprintf+0x3a8>
    1d84:	0b c0       	rjmp	.+22     	; 0x1d9c <vfprintf+0x264>
    1d86:	80 37       	cpi	r24, 0x70	; 112
    1d88:	21 f0       	breq	.+8      	; 0x1d92 <vfprintf+0x25a>
    1d8a:	88 37       	cpi	r24, 0x78	; 120
    1d8c:	09 f0       	breq	.+2      	; 0x1d90 <vfprintf+0x258>
    1d8e:	a8 c0       	rjmp	.+336    	; 0x1ee0 <vfprintf+0x3a8>
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <vfprintf+0x25c>
    1d92:	10 61       	ori	r17, 0x10	; 16
    1d94:	14 ff       	sbrs	r17, 4
    1d96:	09 c0       	rjmp	.+18     	; 0x1daa <vfprintf+0x272>
    1d98:	14 60       	ori	r17, 0x04	; 4
    1d9a:	07 c0       	rjmp	.+14     	; 0x1daa <vfprintf+0x272>
    1d9c:	14 ff       	sbrs	r17, 4
    1d9e:	08 c0       	rjmp	.+16     	; 0x1db0 <vfprintf+0x278>
    1da0:	16 60       	ori	r17, 0x06	; 6
    1da2:	06 c0       	rjmp	.+12     	; 0x1db0 <vfprintf+0x278>
    1da4:	28 e0       	ldi	r18, 0x08	; 8
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	05 c0       	rjmp	.+10     	; 0x1db4 <vfprintf+0x27c>
    1daa:	20 e1       	ldi	r18, 0x10	; 16
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <vfprintf+0x27c>
    1db0:	20 e1       	ldi	r18, 0x10	; 16
    1db2:	32 e0       	ldi	r19, 0x02	; 2
    1db4:	f5 01       	movw	r30, r10
    1db6:	17 ff       	sbrs	r17, 7
    1db8:	07 c0       	rjmp	.+14     	; 0x1dc8 <vfprintf+0x290>
    1dba:	60 81       	ld	r22, Z
    1dbc:	71 81       	ldd	r23, Z+1	; 0x01
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	44 e0       	ldi	r20, 0x04	; 4
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	06 c0       	rjmp	.+12     	; 0x1dd4 <vfprintf+0x29c>
    1dc8:	60 81       	ld	r22, Z
    1dca:	71 81       	ldd	r23, Z+1	; 0x01
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	42 e0       	ldi	r20, 0x02	; 2
    1dd2:	50 e0       	ldi	r21, 0x00	; 0
    1dd4:	a4 0e       	add	r10, r20
    1dd6:	b5 1e       	adc	r11, r21
    1dd8:	a2 01       	movw	r20, r4
    1dda:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__ultoa_invert>
    1dde:	d8 2e       	mov	r13, r24
    1de0:	d4 18       	sub	r13, r4
    1de2:	01 2f       	mov	r16, r17
    1de4:	0f 77       	andi	r16, 0x7F	; 127
    1de6:	06 ff       	sbrs	r16, 6
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <vfprintf+0x2c4>
    1dea:	0e 7f       	andi	r16, 0xFE	; 254
    1dec:	df 14       	cp	r13, r15
    1dee:	30 f4       	brcc	.+12     	; 0x1dfc <vfprintf+0x2c4>
    1df0:	04 ff       	sbrs	r16, 4
    1df2:	06 c0       	rjmp	.+12     	; 0x1e00 <vfprintf+0x2c8>
    1df4:	02 fd       	sbrc	r16, 2
    1df6:	04 c0       	rjmp	.+8      	; 0x1e00 <vfprintf+0x2c8>
    1df8:	0f 7e       	andi	r16, 0xEF	; 239
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <vfprintf+0x2c8>
    1dfc:	1d 2d       	mov	r17, r13
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <vfprintf+0x2ca>
    1e00:	1f 2d       	mov	r17, r15
    1e02:	80 2f       	mov	r24, r16
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	04 ff       	sbrs	r16, 4
    1e08:	0c c0       	rjmp	.+24     	; 0x1e22 <vfprintf+0x2ea>
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	ed 0d       	add	r30, r13
    1e0e:	f1 1d       	adc	r31, r1
    1e10:	20 81       	ld	r18, Z
    1e12:	20 33       	cpi	r18, 0x30	; 48
    1e14:	11 f4       	brne	.+4      	; 0x1e1a <vfprintf+0x2e2>
    1e16:	09 7e       	andi	r16, 0xE9	; 233
    1e18:	09 c0       	rjmp	.+18     	; 0x1e2c <vfprintf+0x2f4>
    1e1a:	02 ff       	sbrs	r16, 2
    1e1c:	06 c0       	rjmp	.+12     	; 0x1e2a <vfprintf+0x2f2>
    1e1e:	1e 5f       	subi	r17, 0xFE	; 254
    1e20:	05 c0       	rjmp	.+10     	; 0x1e2c <vfprintf+0x2f4>
    1e22:	86 78       	andi	r24, 0x86	; 134
    1e24:	90 70       	andi	r25, 0x00	; 0
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	09 f0       	breq	.+2      	; 0x1e2c <vfprintf+0x2f4>
    1e2a:	1f 5f       	subi	r17, 0xFF	; 255
    1e2c:	80 2e       	mov	r8, r16
    1e2e:	99 24       	eor	r9, r9
    1e30:	03 fd       	sbrc	r16, 3
    1e32:	12 c0       	rjmp	.+36     	; 0x1e58 <vfprintf+0x320>
    1e34:	00 ff       	sbrs	r16, 0
    1e36:	0d c0       	rjmp	.+26     	; 0x1e52 <vfprintf+0x31a>
    1e38:	fd 2c       	mov	r15, r13
    1e3a:	1e 15       	cp	r17, r14
    1e3c:	50 f4       	brcc	.+20     	; 0x1e52 <vfprintf+0x31a>
    1e3e:	fe 0c       	add	r15, r14
    1e40:	f1 1a       	sub	r15, r17
    1e42:	1e 2d       	mov	r17, r14
    1e44:	06 c0       	rjmp	.+12     	; 0x1e52 <vfprintf+0x31a>
    1e46:	80 e2       	ldi	r24, 0x20	; 32
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	b3 01       	movw	r22, r6
    1e4c:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <fputc>
    1e50:	1f 5f       	subi	r17, 0xFF	; 255
    1e52:	1e 15       	cp	r17, r14
    1e54:	c0 f3       	brcs	.-16     	; 0x1e46 <vfprintf+0x30e>
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <vfprintf+0x328>
    1e58:	1e 15       	cp	r17, r14
    1e5a:	10 f4       	brcc	.+4      	; 0x1e60 <vfprintf+0x328>
    1e5c:	e1 1a       	sub	r14, r17
    1e5e:	01 c0       	rjmp	.+2      	; 0x1e62 <vfprintf+0x32a>
    1e60:	ee 24       	eor	r14, r14
    1e62:	84 fe       	sbrs	r8, 4
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <vfprintf+0x34c>
    1e66:	80 e3       	ldi	r24, 0x30	; 48
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	b3 01       	movw	r22, r6
    1e6c:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <fputc>
    1e70:	82 fe       	sbrs	r8, 2
    1e72:	1f c0       	rjmp	.+62     	; 0x1eb2 <vfprintf+0x37a>
    1e74:	81 fe       	sbrs	r8, 1
    1e76:	03 c0       	rjmp	.+6      	; 0x1e7e <vfprintf+0x346>
    1e78:	88 e5       	ldi	r24, 0x58	; 88
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	10 c0       	rjmp	.+32     	; 0x1e9e <vfprintf+0x366>
    1e7e:	88 e7       	ldi	r24, 0x78	; 120
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	0d c0       	rjmp	.+26     	; 0x1e9e <vfprintf+0x366>
    1e84:	c4 01       	movw	r24, r8
    1e86:	86 78       	andi	r24, 0x86	; 134
    1e88:	90 70       	andi	r25, 0x00	; 0
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	91 f0       	breq	.+36     	; 0x1eb2 <vfprintf+0x37a>
    1e8e:	81 fc       	sbrc	r8, 1
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <vfprintf+0x35e>
    1e92:	80 e2       	ldi	r24, 0x20	; 32
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <vfprintf+0x360>
    1e96:	8b e2       	ldi	r24, 0x2B	; 43
    1e98:	07 fd       	sbrc	r16, 7
    1e9a:	8d e2       	ldi	r24, 0x2D	; 45
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	b3 01       	movw	r22, r6
    1ea0:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <fputc>
    1ea4:	06 c0       	rjmp	.+12     	; 0x1eb2 <vfprintf+0x37a>
    1ea6:	80 e3       	ldi	r24, 0x30	; 48
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	b3 01       	movw	r22, r6
    1eac:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <fputc>
    1eb0:	fa 94       	dec	r15
    1eb2:	df 14       	cp	r13, r15
    1eb4:	c0 f3       	brcs	.-16     	; 0x1ea6 <vfprintf+0x36e>
    1eb6:	da 94       	dec	r13
    1eb8:	f2 01       	movw	r30, r4
    1eba:	ed 0d       	add	r30, r13
    1ebc:	f1 1d       	adc	r31, r1
    1ebe:	80 81       	ld	r24, Z
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	b3 01       	movw	r22, r6
    1ec4:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <fputc>
    1ec8:	dd 20       	and	r13, r13
    1eca:	a9 f7       	brne	.-22     	; 0x1eb6 <vfprintf+0x37e>
    1ecc:	06 c0       	rjmp	.+12     	; 0x1eda <vfprintf+0x3a2>
    1ece:	80 e2       	ldi	r24, 0x20	; 32
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	b3 01       	movw	r22, r6
    1ed4:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <fputc>
    1ed8:	ea 94       	dec	r14
    1eda:	ee 20       	and	r14, r14
    1edc:	c1 f7       	brne	.-16     	; 0x1ece <vfprintf+0x396>
    1ede:	40 ce       	rjmp	.-896    	; 0x1b60 <vfprintf+0x28>
    1ee0:	f3 01       	movw	r30, r6
    1ee2:	86 81       	ldd	r24, Z+6	; 0x06
    1ee4:	97 81       	ldd	r25, Z+7	; 0x07
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <vfprintf+0x3b4>
    1ee8:	8f ef       	ldi	r24, 0xFF	; 255
    1eea:	9f ef       	ldi	r25, 0xFF	; 255
    1eec:	2d 96       	adiw	r28, 0x0d	; 13
    1eee:	e2 e1       	ldi	r30, 0x12	; 18
    1ef0:	0c 94 36 10 	jmp	0x206c	; 0x206c <__epilogue_restores__>

00001ef4 <strnlen_P>:
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	05 90       	lpm	r0, Z+
    1ef8:	61 50       	subi	r22, 0x01	; 1
    1efa:	70 40       	sbci	r23, 0x00	; 0
    1efc:	01 10       	cpse	r0, r1
    1efe:	d8 f7       	brcc	.-10     	; 0x1ef6 <strnlen_P+0x2>
    1f00:	80 95       	com	r24
    1f02:	90 95       	com	r25
    1f04:	8e 0f       	add	r24, r30
    1f06:	9f 1f       	adc	r25, r31
    1f08:	08 95       	ret

00001f0a <strnlen>:
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	61 50       	subi	r22, 0x01	; 1
    1f0e:	70 40       	sbci	r23, 0x00	; 0
    1f10:	01 90       	ld	r0, Z+
    1f12:	01 10       	cpse	r0, r1
    1f14:	d8 f7       	brcc	.-10     	; 0x1f0c <strnlen+0x2>
    1f16:	80 95       	com	r24
    1f18:	90 95       	com	r25
    1f1a:	8e 0f       	add	r24, r30
    1f1c:	9f 1f       	adc	r25, r31
    1f1e:	08 95       	ret

00001f20 <fputc>:
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	8c 01       	movw	r16, r24
    1f2a:	eb 01       	movw	r28, r22
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	81 ff       	sbrs	r24, 1
    1f30:	1b c0       	rjmp	.+54     	; 0x1f68 <fputc+0x48>
    1f32:	82 ff       	sbrs	r24, 2
    1f34:	0d c0       	rjmp	.+26     	; 0x1f50 <fputc+0x30>
    1f36:	2e 81       	ldd	r18, Y+6	; 0x06
    1f38:	3f 81       	ldd	r19, Y+7	; 0x07
    1f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3e:	28 17       	cp	r18, r24
    1f40:	39 07       	cpc	r19, r25
    1f42:	64 f4       	brge	.+24     	; 0x1f5c <fputc+0x3c>
    1f44:	e8 81       	ld	r30, Y
    1f46:	f9 81       	ldd	r31, Y+1	; 0x01
    1f48:	01 93       	st	Z+, r16
    1f4a:	f9 83       	std	Y+1, r31	; 0x01
    1f4c:	e8 83       	st	Y, r30
    1f4e:	06 c0       	rjmp	.+12     	; 0x1f5c <fputc+0x3c>
    1f50:	e8 85       	ldd	r30, Y+8	; 0x08
    1f52:	f9 85       	ldd	r31, Y+9	; 0x09
    1f54:	80 2f       	mov	r24, r16
    1f56:	09 95       	icall
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	31 f4       	brne	.+12     	; 0x1f68 <fputc+0x48>
    1f5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f60:	01 96       	adiw	r24, 0x01	; 1
    1f62:	9f 83       	std	Y+7, r25	; 0x07
    1f64:	8e 83       	std	Y+6, r24	; 0x06
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <fputc+0x4c>
    1f68:	0f ef       	ldi	r16, 0xFF	; 255
    1f6a:	1f ef       	ldi	r17, 0xFF	; 255
    1f6c:	c8 01       	movw	r24, r16
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	1f 91       	pop	r17
    1f74:	0f 91       	pop	r16
    1f76:	08 95       	ret

00001f78 <__ultoa_invert>:
    1f78:	fa 01       	movw	r30, r20
    1f7a:	aa 27       	eor	r26, r26
    1f7c:	28 30       	cpi	r18, 0x08	; 8
    1f7e:	51 f1       	breq	.+84     	; 0x1fd4 <__ultoa_invert+0x5c>
    1f80:	20 31       	cpi	r18, 0x10	; 16
    1f82:	81 f1       	breq	.+96     	; 0x1fe4 <__ultoa_invert+0x6c>
    1f84:	e8 94       	clt
    1f86:	6f 93       	push	r22
    1f88:	6e 7f       	andi	r22, 0xFE	; 254
    1f8a:	6e 5f       	subi	r22, 0xFE	; 254
    1f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1f90:	9f 4f       	sbci	r25, 0xFF	; 255
    1f92:	af 4f       	sbci	r26, 0xFF	; 255
    1f94:	b1 e0       	ldi	r27, 0x01	; 1
    1f96:	3e d0       	rcall	.+124    	; 0x2014 <__ultoa_invert+0x9c>
    1f98:	b4 e0       	ldi	r27, 0x04	; 4
    1f9a:	3c d0       	rcall	.+120    	; 0x2014 <__ultoa_invert+0x9c>
    1f9c:	67 0f       	add	r22, r23
    1f9e:	78 1f       	adc	r23, r24
    1fa0:	89 1f       	adc	r24, r25
    1fa2:	9a 1f       	adc	r25, r26
    1fa4:	a1 1d       	adc	r26, r1
    1fa6:	68 0f       	add	r22, r24
    1fa8:	79 1f       	adc	r23, r25
    1faa:	8a 1f       	adc	r24, r26
    1fac:	91 1d       	adc	r25, r1
    1fae:	a1 1d       	adc	r26, r1
    1fb0:	6a 0f       	add	r22, r26
    1fb2:	71 1d       	adc	r23, r1
    1fb4:	81 1d       	adc	r24, r1
    1fb6:	91 1d       	adc	r25, r1
    1fb8:	a1 1d       	adc	r26, r1
    1fba:	20 d0       	rcall	.+64     	; 0x1ffc <__ultoa_invert+0x84>
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <__ultoa_invert+0x48>
    1fbe:	68 94       	set
    1fc0:	3f 91       	pop	r19
    1fc2:	2a e0       	ldi	r18, 0x0A	; 10
    1fc4:	26 9f       	mul	r18, r22
    1fc6:	11 24       	eor	r1, r1
    1fc8:	30 19       	sub	r19, r0
    1fca:	30 5d       	subi	r19, 0xD0	; 208
    1fcc:	31 93       	st	Z+, r19
    1fce:	de f6       	brtc	.-74     	; 0x1f86 <__ultoa_invert+0xe>
    1fd0:	cf 01       	movw	r24, r30
    1fd2:	08 95       	ret
    1fd4:	46 2f       	mov	r20, r22
    1fd6:	47 70       	andi	r20, 0x07	; 7
    1fd8:	40 5d       	subi	r20, 0xD0	; 208
    1fda:	41 93       	st	Z+, r20
    1fdc:	b3 e0       	ldi	r27, 0x03	; 3
    1fde:	0f d0       	rcall	.+30     	; 0x1ffe <__ultoa_invert+0x86>
    1fe0:	c9 f7       	brne	.-14     	; 0x1fd4 <__ultoa_invert+0x5c>
    1fe2:	f6 cf       	rjmp	.-20     	; 0x1fd0 <__ultoa_invert+0x58>
    1fe4:	46 2f       	mov	r20, r22
    1fe6:	4f 70       	andi	r20, 0x0F	; 15
    1fe8:	40 5d       	subi	r20, 0xD0	; 208
    1fea:	4a 33       	cpi	r20, 0x3A	; 58
    1fec:	18 f0       	brcs	.+6      	; 0x1ff4 <__ultoa_invert+0x7c>
    1fee:	49 5d       	subi	r20, 0xD9	; 217
    1ff0:	31 fd       	sbrc	r19, 1
    1ff2:	40 52       	subi	r20, 0x20	; 32
    1ff4:	41 93       	st	Z+, r20
    1ff6:	02 d0       	rcall	.+4      	; 0x1ffc <__ultoa_invert+0x84>
    1ff8:	a9 f7       	brne	.-22     	; 0x1fe4 <__ultoa_invert+0x6c>
    1ffa:	ea cf       	rjmp	.-44     	; 0x1fd0 <__ultoa_invert+0x58>
    1ffc:	b4 e0       	ldi	r27, 0x04	; 4
    1ffe:	a6 95       	lsr	r26
    2000:	97 95       	ror	r25
    2002:	87 95       	ror	r24
    2004:	77 95       	ror	r23
    2006:	67 95       	ror	r22
    2008:	ba 95       	dec	r27
    200a:	c9 f7       	brne	.-14     	; 0x1ffe <__ultoa_invert+0x86>
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	61 05       	cpc	r22, r1
    2010:	71 05       	cpc	r23, r1
    2012:	08 95       	ret
    2014:	9b 01       	movw	r18, r22
    2016:	ac 01       	movw	r20, r24
    2018:	0a 2e       	mov	r0, r26
    201a:	06 94       	lsr	r0
    201c:	57 95       	ror	r21
    201e:	47 95       	ror	r20
    2020:	37 95       	ror	r19
    2022:	27 95       	ror	r18
    2024:	ba 95       	dec	r27
    2026:	c9 f7       	brne	.-14     	; 0x201a <__ultoa_invert+0xa2>
    2028:	62 0f       	add	r22, r18
    202a:	73 1f       	adc	r23, r19
    202c:	84 1f       	adc	r24, r20
    202e:	95 1f       	adc	r25, r21
    2030:	a0 1d       	adc	r26, r0
    2032:	08 95       	ret

00002034 <__prologue_saves__>:
    2034:	2f 92       	push	r2
    2036:	3f 92       	push	r3
    2038:	4f 92       	push	r4
    203a:	5f 92       	push	r5
    203c:	6f 92       	push	r6
    203e:	7f 92       	push	r7
    2040:	8f 92       	push	r8
    2042:	9f 92       	push	r9
    2044:	af 92       	push	r10
    2046:	bf 92       	push	r11
    2048:	cf 92       	push	r12
    204a:	df 92       	push	r13
    204c:	ef 92       	push	r14
    204e:	ff 92       	push	r15
    2050:	0f 93       	push	r16
    2052:	1f 93       	push	r17
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	ca 1b       	sub	r28, r26
    205e:	db 0b       	sbc	r29, r27
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	09 94       	ijmp

0000206c <__epilogue_restores__>:
    206c:	2a 88       	ldd	r2, Y+18	; 0x12
    206e:	39 88       	ldd	r3, Y+17	; 0x11
    2070:	48 88       	ldd	r4, Y+16	; 0x10
    2072:	5f 84       	ldd	r5, Y+15	; 0x0f
    2074:	6e 84       	ldd	r6, Y+14	; 0x0e
    2076:	7d 84       	ldd	r7, Y+13	; 0x0d
    2078:	8c 84       	ldd	r8, Y+12	; 0x0c
    207a:	9b 84       	ldd	r9, Y+11	; 0x0b
    207c:	aa 84       	ldd	r10, Y+10	; 0x0a
    207e:	b9 84       	ldd	r11, Y+9	; 0x09
    2080:	c8 84       	ldd	r12, Y+8	; 0x08
    2082:	df 80       	ldd	r13, Y+7	; 0x07
    2084:	ee 80       	ldd	r14, Y+6	; 0x06
    2086:	fd 80       	ldd	r15, Y+5	; 0x05
    2088:	0c 81       	ldd	r16, Y+4	; 0x04
    208a:	1b 81       	ldd	r17, Y+3	; 0x03
    208c:	aa 81       	ldd	r26, Y+2	; 0x02
    208e:	b9 81       	ldd	r27, Y+1	; 0x01
    2090:	ce 0f       	add	r28, r30
    2092:	d1 1d       	adc	r29, r1
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	ed 01       	movw	r28, r26
    20a0:	08 95       	ret

000020a2 <_exit>:
    20a2:	f8 94       	cli

000020a4 <__stop_program>:
    20a4:	ff cf       	rjmp	.-2      	; 0x20a4 <__stop_program>
